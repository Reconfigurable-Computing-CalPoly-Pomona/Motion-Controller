// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="config_block,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.135000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1269,HLS_SYN_LUT=987,HLS_VERSION=2018_2}" *)

module config_block (
        ap_clk,
        ap_rst_n,
        mtr_cnt,
        motor_dir_V,
        motor_en_V,
        h_dir_V,
        max_count,
        fast_homing_freq,
        accurate_homing_freq,
        retrack_count,
        strt_V,
        s_axi_c_AWVALID,
        s_axi_c_AWREADY,
        s_axi_c_AWADDR,
        s_axi_c_WVALID,
        s_axi_c_WREADY,
        s_axi_c_WDATA,
        s_axi_c_WSTRB,
        s_axi_c_ARVALID,
        s_axi_c_ARREADY,
        s_axi_c_ARADDR,
        s_axi_c_RVALID,
        s_axi_c_RREADY,
        s_axi_c_RDATA,
        s_axi_c_RRESP,
        s_axi_c_BVALID,
        s_axi_c_BREADY,
        s_axi_c_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;
parameter    C_S_AXI_C_DATA_WIDTH = 32;
parameter    C_S_AXI_C_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_C_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] mtr_cnt;
output  [0:0] motor_dir_V;
output  [0:0] motor_en_V;
output  [0:0] h_dir_V;
output  [31:0] max_count;
output  [31:0] fast_homing_freq;
output  [31:0] accurate_homing_freq;
output  [31:0] retrack_count;
input  [0:0] strt_V;
input   s_axi_c_AWVALID;
output   s_axi_c_AWREADY;
input  [C_S_AXI_C_ADDR_WIDTH - 1:0] s_axi_c_AWADDR;
input   s_axi_c_WVALID;
output   s_axi_c_WREADY;
input  [C_S_AXI_C_DATA_WIDTH - 1:0] s_axi_c_WDATA;
input  [C_S_AXI_C_WSTRB_WIDTH - 1:0] s_axi_c_WSTRB;
input   s_axi_c_ARVALID;
output   s_axi_c_ARREADY;
input  [C_S_AXI_C_ADDR_WIDTH - 1:0] s_axi_c_ARADDR;
output   s_axi_c_RVALID;
input   s_axi_c_RREADY;
output  [C_S_AXI_C_DATA_WIDTH - 1:0] s_axi_c_RDATA;
output  [1:0] s_axi_c_RRESP;
output   s_axi_c_BVALID;
input   s_axi_c_BREADY;
output  [1:0] s_axi_c_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] mx_cnt;
reg   [31:0] mtr_cnt_0_data_reg;
reg    mtr_cnt_0_vld_reg;
reg    mtr_cnt_0_ack_out;
wire   [31:0] fst_h_freq;
wire   [31:0] acc_h_freq;
wire   [31:0] retrk_cnt;
wire   [0:0] mtr_dir_V;
wire   [0:0] home_dir_V;
wire   [0:0] mtr_en_V;
reg   [0:0] motor_dir_V_1_data_reg;
reg    motor_dir_V_1_vld_reg;
reg    motor_dir_V_1_vld_in;
reg    motor_dir_V_1_ack_in;
reg   [0:0] motor_en_V_1_data_reg;
reg    motor_en_V_1_vld_reg;
reg    motor_en_V_1_vld_in;
reg    motor_en_V_1_ack_in;
reg   [0:0] h_dir_V_1_data_reg;
reg    h_dir_V_1_vld_reg;
reg    h_dir_V_1_vld_in;
reg    h_dir_V_1_ack_in;
reg   [31:0] max_count_1_data_reg;
reg    max_count_1_vld_reg;
reg    max_count_1_vld_in;
reg    max_count_1_ack_in;
reg   [31:0] motor_count_1_data_reg;
reg    motor_count_1_vld_reg;
reg    motor_count_1_vld_in;
reg    motor_count_1_ack_in;
reg   [31:0] fast_homing_freq_1_data_reg;
reg    fast_homing_freq_1_vld_reg;
reg    fast_homing_freq_1_vld_in;
reg    fast_homing_freq_1_ack_in;
reg   [31:0] accurate_homing_freq_1_data_reg;
reg    accurate_homing_freq_1_vld_reg;
reg    accurate_homing_freq_1_vld_in;
reg    accurate_homing_freq_1_ack_in;
reg   [31:0] retrack_count_1_data_reg;
reg    retrack_count_1_vld_reg;
reg    retrack_count_1_vld_in;
reg    retrack_count_1_ack_in;
reg   [0:0] strt_V_0_data_reg;
reg    strt_V_0_vld_reg;
reg    strt_V_0_ack_out;
reg    start_V_ap_vld;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_198_p2;
wire    ap_CS_fsm_state29;
wire   [31:0] grp_fu_205_p2;
wire   [24:0] grp_fu_198_p0;
wire   [24:0] grp_fu_205_p0;
reg    grp_fu_198_ap_start;
wire    grp_fu_198_ap_done;
reg    grp_fu_205_ap_start;
wire    grp_fu_205_ap_done;
wire    ap_CS_fsm_state30;
reg    ap_block_state30;
reg   [29:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 mtr_cnt_0_data_reg = 32'd0;
#0 mtr_cnt_0_vld_reg = 1'b0;
#0 motor_dir_V_1_data_reg = 1'd0;
#0 motor_dir_V_1_vld_reg = 1'b0;
#0 motor_en_V_1_data_reg = 1'd0;
#0 motor_en_V_1_vld_reg = 1'b0;
#0 h_dir_V_1_data_reg = 1'd0;
#0 h_dir_V_1_vld_reg = 1'b0;
#0 max_count_1_data_reg = 32'd0;
#0 max_count_1_vld_reg = 1'b0;
#0 motor_count_1_data_reg = 32'd0;
#0 motor_count_1_vld_reg = 1'b0;
#0 fast_homing_freq_1_data_reg = 32'd0;
#0 fast_homing_freq_1_vld_reg = 1'b0;
#0 accurate_homing_freq_1_data_reg = 32'd0;
#0 accurate_homing_freq_1_vld_reg = 1'b0;
#0 retrack_count_1_data_reg = 32'd0;
#0 retrack_count_1_vld_reg = 1'b0;
#0 strt_V_0_data_reg = 1'd0;
#0 strt_V_0_vld_reg = 1'b0;
end

config_block_c_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_C_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_C_DATA_WIDTH ))
config_block_c_s_axi_U(
    .AWVALID(s_axi_c_AWVALID),
    .AWREADY(s_axi_c_AWREADY),
    .AWADDR(s_axi_c_AWADDR),
    .WVALID(s_axi_c_WVALID),
    .WREADY(s_axi_c_WREADY),
    .WDATA(s_axi_c_WDATA),
    .WSTRB(s_axi_c_WSTRB),
    .ARVALID(s_axi_c_ARVALID),
    .ARREADY(s_axi_c_ARREADY),
    .ARADDR(s_axi_c_ARADDR),
    .RVALID(s_axi_c_RVALID),
    .RREADY(s_axi_c_RREADY),
    .RDATA(s_axi_c_RDATA),
    .RRESP(s_axi_c_RRESP),
    .BVALID(s_axi_c_BVALID),
    .BREADY(s_axi_c_BREADY),
    .BRESP(s_axi_c_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .mx_cnt(mx_cnt),
    .fst_h_freq(fst_h_freq),
    .acc_h_freq(acc_h_freq),
    .retrk_cnt(retrk_cnt),
    .mtr_dir_V(mtr_dir_V),
    .home_dir_V(home_dir_V),
    .mtr_en_V(mtr_en_V),
    .motor_count(motor_count_1_data_reg),
    .motor_count_ap_vld(motor_count_1_vld_reg),
    .start_V(strt_V_0_data_reg),
    .start_V_ap_vld(start_V_ap_vld)
);

config_block_sdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
config_block_sdivbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_198_ap_start),
    .done(grp_fu_198_ap_done),
    .din0(grp_fu_198_p0),
    .din1(fst_h_freq),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

config_block_sdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
config_block_sdivbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_205_ap_start),
    .done(grp_fu_205_ap_done),
    .din0(grp_fu_205_p0),
    .din1(acc_h_freq),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (motor_count_1_vld_reg == 1'b0) & (motor_count_1_vld_in == 1'b1))) begin
        motor_count_1_vld_reg <= 1'b1;
    end else if (((motor_count_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (motor_count_1_vld_reg == 1'b1))) begin
        motor_count_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b0 == accurate_homing_freq_1_vld_reg) & (1'b1 == accurate_homing_freq_1_vld_in)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (1'b1 == accurate_homing_freq_1_vld_in) & (1'b1 == accurate_homing_freq_1_vld_reg)))) begin
        accurate_homing_freq_1_data_reg <= grp_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (fast_homing_freq_1_vld_reg == 1'b0) & (fast_homing_freq_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (fast_homing_freq_1_vld_in == 1'b1) & (fast_homing_freq_1_vld_reg == 1'b1)))) begin
        fast_homing_freq_1_data_reg <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (h_dir_V_1_vld_reg == 1'b0) & (h_dir_V_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (h_dir_V_1_vld_in == 1'b1) & (h_dir_V_1_vld_reg == 1'b1)))) begin
        h_dir_V_1_data_reg <= home_dir_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (max_count_1_vld_reg == 1'b0) & (max_count_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (max_count_1_vld_in == 1'b1) & (max_count_1_vld_reg == 1'b1)))) begin
        max_count_1_data_reg <= mx_cnt;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (motor_count_1_vld_reg == 1'b0) & (motor_count_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (motor_count_1_vld_in == 1'b1) & (motor_count_1_vld_reg == 1'b1)))) begin
        motor_count_1_data_reg <= mtr_cnt_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (motor_dir_V_1_vld_reg == 1'b0) & (motor_dir_V_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (motor_dir_V_1_vld_in == 1'b1) & (motor_dir_V_1_vld_reg == 1'b1)))) begin
        motor_dir_V_1_data_reg <= mtr_dir_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (motor_en_V_1_vld_reg == 1'b0) & (motor_en_V_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (motor_en_V_1_vld_in == 1'b1) & (motor_en_V_1_vld_reg == 1'b1)))) begin
        motor_en_V_1_data_reg <= mtr_en_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (mtr_cnt_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (mtr_cnt_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mtr_cnt_0_vld_reg == 1'b1)))) begin
        mtr_cnt_0_data_reg <= mtr_cnt;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (retrack_count_1_vld_reg == 1'b0) & (retrack_count_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (retrack_count_1_vld_in == 1'b1) & (retrack_count_1_vld_reg == 1'b1)))) begin
        retrack_count_1_data_reg <= retrk_cnt;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (strt_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (strt_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (strt_V_0_vld_reg == 1'b1)))) begin
        strt_V_0_data_reg <= strt_V;
    end
end

always @ (*) begin
    if (((1'b0 == accurate_homing_freq_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == accurate_homing_freq_1_vld_reg)))) begin
        accurate_homing_freq_1_ack_in = 1'b1;
    end else begin
        accurate_homing_freq_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        accurate_homing_freq_1_vld_in = 1'b1;
    end else begin
        accurate_homing_freq_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((motor_dir_V_1_ack_in == 1'b0) | (retrack_count_1_ack_in == 1'b0) | (1'b0 == accurate_homing_freq_1_ack_in) | (fast_homing_freq_1_ack_in == 1'b0) | (motor_count_1_ack_in == 1'b0) | (max_count_1_ack_in == 1'b0) | (h_dir_V_1_ack_in == 1'b0) | (motor_en_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((motor_dir_V_1_ack_in == 1'b0) | (retrack_count_1_ack_in == 1'b0) | (1'b0 == accurate_homing_freq_1_ack_in) | (fast_homing_freq_1_ack_in == 1'b0) | (motor_count_1_ack_in == 1'b0) | (max_count_1_ack_in == 1'b0) | (h_dir_V_1_ack_in == 1'b0) | (motor_en_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((fast_homing_freq_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (fast_homing_freq_1_vld_reg == 1'b1)))) begin
        fast_homing_freq_1_ack_in = 1'b1;
    end else begin
        fast_homing_freq_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        fast_homing_freq_1_vld_in = 1'b1;
    end else begin
        fast_homing_freq_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_198_ap_start = 1'b1;
    end else begin
        grp_fu_198_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_205_ap_start = 1'b1;
    end else begin
        grp_fu_205_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((h_dir_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (h_dir_V_1_vld_reg == 1'b1)))) begin
        h_dir_V_1_ack_in = 1'b1;
    end else begin
        h_dir_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_dir_V_1_vld_in = 1'b1;
    end else begin
        h_dir_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((max_count_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (max_count_1_vld_reg == 1'b1)))) begin
        max_count_1_ack_in = 1'b1;
    end else begin
        max_count_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_count_1_vld_in = 1'b1;
    end else begin
        max_count_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((motor_count_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (motor_count_1_vld_reg == 1'b1)))) begin
        motor_count_1_ack_in = 1'b1;
    end else begin
        motor_count_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        motor_count_1_vld_in = 1'b1;
    end else begin
        motor_count_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((motor_dir_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (motor_dir_V_1_vld_reg == 1'b1)))) begin
        motor_dir_V_1_ack_in = 1'b1;
    end else begin
        motor_dir_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        motor_dir_V_1_vld_in = 1'b1;
    end else begin
        motor_dir_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((motor_en_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (motor_en_V_1_vld_reg == 1'b1)))) begin
        motor_en_V_1_ack_in = 1'b1;
    end else begin
        motor_en_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        motor_en_V_1_vld_in = 1'b1;
    end else begin
        motor_en_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((motor_dir_V_1_ack_in == 1'b0) | (retrack_count_1_ack_in == 1'b0) | (1'b0 == accurate_homing_freq_1_ack_in) | (fast_homing_freq_1_ack_in == 1'b0) | (motor_count_1_ack_in == 1'b0) | (max_count_1_ack_in == 1'b0) | (h_dir_V_1_ack_in == 1'b0) | (motor_en_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        mtr_cnt_0_ack_out = 1'b1;
    end else begin
        mtr_cnt_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((retrack_count_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (retrack_count_1_vld_reg == 1'b1)))) begin
        retrack_count_1_ack_in = 1'b1;
    end else begin
        retrack_count_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        retrack_count_1_vld_in = 1'b1;
    end else begin
        retrack_count_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        start_V_ap_vld = 1'b1;
    end else begin
        start_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((motor_dir_V_1_ack_in == 1'b0) | (retrack_count_1_ack_in == 1'b0) | (1'b0 == accurate_homing_freq_1_ack_in) | (fast_homing_freq_1_ack_in == 1'b0) | (motor_count_1_ack_in == 1'b0) | (max_count_1_ack_in == 1'b0) | (h_dir_V_1_ack_in == 1'b0) | (motor_en_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        strt_V_0_ack_out = 1'b1;
    end else begin
        strt_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if ((~((motor_dir_V_1_ack_in == 1'b0) | (retrack_count_1_ack_in == 1'b0) | (1'b0 == accurate_homing_freq_1_ack_in) | (fast_homing_freq_1_ack_in == 1'b0) | (motor_count_1_ack_in == 1'b0) | (max_count_1_ack_in == 1'b0) | (h_dir_V_1_ack_in == 1'b0) | (motor_en_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accurate_homing_freq = accurate_homing_freq_1_data_reg;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

always @ (*) begin
    ap_block_state30 = ((motor_dir_V_1_ack_in == 1'b0) | (retrack_count_1_ack_in == 1'b0) | (1'b0 == accurate_homing_freq_1_ack_in) | (fast_homing_freq_1_ack_in == 1'b0) | (motor_count_1_ack_in == 1'b0) | (max_count_1_ack_in == 1'b0) | (h_dir_V_1_ack_in == 1'b0) | (motor_en_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign fast_homing_freq = fast_homing_freq_1_data_reg;

assign grp_fu_198_p0 = 32'd6250000;

assign grp_fu_205_p0 = 32'd6250000;

assign h_dir_V = h_dir_V_1_data_reg;

assign max_count = max_count_1_data_reg;

assign motor_dir_V = motor_dir_V_1_data_reg;

assign motor_en_V = motor_en_V_1_data_reg;

assign retrack_count = retrack_count_1_data_reg;

endmodule //config_block
