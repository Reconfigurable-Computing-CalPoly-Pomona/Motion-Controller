// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scurve,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.320850,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=64,HLS_SYN_FF=12516,HLS_SYN_LUT=21713,HLS_VERSION=2018_2}" *)

module scurve (
        ap_clk,
        ap_rst_n,
        e_V,
        vout_din,
        vout_full_n,
        vout_write,
        s_axi_scrv_AWVALID,
        s_axi_scrv_AWREADY,
        s_axi_scrv_AWADDR,
        s_axi_scrv_WVALID,
        s_axi_scrv_WREADY,
        s_axi_scrv_WDATA,
        s_axi_scrv_WSTRB,
        s_axi_scrv_ARVALID,
        s_axi_scrv_ARREADY,
        s_axi_scrv_ARADDR,
        s_axi_scrv_RVALID,
        s_axi_scrv_RREADY,
        s_axi_scrv_RDATA,
        s_axi_scrv_RRESP,
        s_axi_scrv_BVALID,
        s_axi_scrv_BREADY,
        s_axi_scrv_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 192'd1;
parameter    ap_ST_fsm_state2 = 192'd2;
parameter    ap_ST_fsm_state3 = 192'd4;
parameter    ap_ST_fsm_state4 = 192'd8;
parameter    ap_ST_fsm_state5 = 192'd16;
parameter    ap_ST_fsm_state6 = 192'd32;
parameter    ap_ST_fsm_state7 = 192'd64;
parameter    ap_ST_fsm_state8 = 192'd128;
parameter    ap_ST_fsm_state9 = 192'd256;
parameter    ap_ST_fsm_state10 = 192'd512;
parameter    ap_ST_fsm_state11 = 192'd1024;
parameter    ap_ST_fsm_state12 = 192'd2048;
parameter    ap_ST_fsm_state13 = 192'd4096;
parameter    ap_ST_fsm_state14 = 192'd8192;
parameter    ap_ST_fsm_state15 = 192'd16384;
parameter    ap_ST_fsm_state16 = 192'd32768;
parameter    ap_ST_fsm_state17 = 192'd65536;
parameter    ap_ST_fsm_state18 = 192'd131072;
parameter    ap_ST_fsm_state19 = 192'd262144;
parameter    ap_ST_fsm_state20 = 192'd524288;
parameter    ap_ST_fsm_state21 = 192'd1048576;
parameter    ap_ST_fsm_state22 = 192'd2097152;
parameter    ap_ST_fsm_state23 = 192'd4194304;
parameter    ap_ST_fsm_state24 = 192'd8388608;
parameter    ap_ST_fsm_state25 = 192'd16777216;
parameter    ap_ST_fsm_state26 = 192'd33554432;
parameter    ap_ST_fsm_state27 = 192'd67108864;
parameter    ap_ST_fsm_state28 = 192'd134217728;
parameter    ap_ST_fsm_state29 = 192'd268435456;
parameter    ap_ST_fsm_state30 = 192'd536870912;
parameter    ap_ST_fsm_state31 = 192'd1073741824;
parameter    ap_ST_fsm_state32 = 192'd2147483648;
parameter    ap_ST_fsm_state33 = 192'd4294967296;
parameter    ap_ST_fsm_state34 = 192'd8589934592;
parameter    ap_ST_fsm_state35 = 192'd17179869184;
parameter    ap_ST_fsm_state36 = 192'd34359738368;
parameter    ap_ST_fsm_state37 = 192'd68719476736;
parameter    ap_ST_fsm_state38 = 192'd137438953472;
parameter    ap_ST_fsm_state39 = 192'd274877906944;
parameter    ap_ST_fsm_state40 = 192'd549755813888;
parameter    ap_ST_fsm_state41 = 192'd1099511627776;
parameter    ap_ST_fsm_state42 = 192'd2199023255552;
parameter    ap_ST_fsm_state43 = 192'd4398046511104;
parameter    ap_ST_fsm_state44 = 192'd8796093022208;
parameter    ap_ST_fsm_state45 = 192'd17592186044416;
parameter    ap_ST_fsm_state46 = 192'd35184372088832;
parameter    ap_ST_fsm_state47 = 192'd70368744177664;
parameter    ap_ST_fsm_state48 = 192'd140737488355328;
parameter    ap_ST_fsm_state49 = 192'd281474976710656;
parameter    ap_ST_fsm_state50 = 192'd562949953421312;
parameter    ap_ST_fsm_state51 = 192'd1125899906842624;
parameter    ap_ST_fsm_state52 = 192'd2251799813685248;
parameter    ap_ST_fsm_state53 = 192'd4503599627370496;
parameter    ap_ST_fsm_state54 = 192'd9007199254740992;
parameter    ap_ST_fsm_state55 = 192'd18014398509481984;
parameter    ap_ST_fsm_state56 = 192'd36028797018963968;
parameter    ap_ST_fsm_state57 = 192'd72057594037927936;
parameter    ap_ST_fsm_state58 = 192'd144115188075855872;
parameter    ap_ST_fsm_state59 = 192'd288230376151711744;
parameter    ap_ST_fsm_state60 = 192'd576460752303423488;
parameter    ap_ST_fsm_state61 = 192'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 192'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 192'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 192'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 192'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 192'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 192'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 192'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 192'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 192'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 192'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 192'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 192'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 192'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 192'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 192'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 192'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 192'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 192'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 192'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 192'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 192'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 192'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 192'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 192'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 192'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 192'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 192'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 192'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 192'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 192'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 192'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 192'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 192'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 192'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 192'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 192'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 192'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 192'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 192'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 192'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 192'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 192'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 192'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 192'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 192'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 192'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 192'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 192'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 192'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 192'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 192'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 192'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 192'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 192'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 192'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 192'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 192'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 192'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 192'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 192'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 192'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 192'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 192'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 192'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 192'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 192'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 192'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 192'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 192'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 192'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 192'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 192'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 192'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 192'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 192'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 192'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 192'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 192'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 192'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 192'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 192'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 192'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 192'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 192'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 192'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 192'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 192'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 192'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 192'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 192'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 192'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 192'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 192'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 192'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 192'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 192'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 192'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 192'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 192'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 192'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 192'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 192'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 192'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 192'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 192'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 192'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 192'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 192'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 192'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 192'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 192'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 192'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 192'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 192'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 192'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 192'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 192'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 192'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 192'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 192'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 192'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 192'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 192'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 192'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 192'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 192'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 192'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 192'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 192'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 192'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 192'd3138550867693340381917894711603833208051177722232017256448;
parameter    C_S_AXI_SCRV_DATA_WIDTH = 32;
parameter    C_S_AXI_SCRV_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_SCRV_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [0:0] e_V;
output  [31:0] vout_din;
input   vout_full_n;
output   vout_write;
input   s_axi_scrv_AWVALID;
output   s_axi_scrv_AWREADY;
input  [C_S_AXI_SCRV_ADDR_WIDTH - 1:0] s_axi_scrv_AWADDR;
input   s_axi_scrv_WVALID;
output   s_axi_scrv_WREADY;
input  [C_S_AXI_SCRV_DATA_WIDTH - 1:0] s_axi_scrv_WDATA;
input  [C_S_AXI_SCRV_WSTRB_WIDTH - 1:0] s_axi_scrv_WSTRB;
input   s_axi_scrv_ARVALID;
output   s_axi_scrv_ARREADY;
input  [C_S_AXI_SCRV_ADDR_WIDTH - 1:0] s_axi_scrv_ARADDR;
output   s_axi_scrv_RVALID;
input   s_axi_scrv_RREADY;
output  [C_S_AXI_SCRV_DATA_WIDTH - 1:0] s_axi_scrv_RDATA;
output  [1:0] s_axi_scrv_RRESP;
output   s_axi_scrv_BVALID;
input   s_axi_scrv_BREADY;
output  [1:0] s_axi_scrv_BRESP;
output   interrupt;

reg vout_write;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [191:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] L;
wire   [31:0] J;
wire   [31:0] vs;
wire   [31:0] ve;
wire   [31:0] v;
reg    e_V_1_vld_reg;
reg    e_V_1_ack_in;
reg    freq_ap_vld;
reg    vout_blk_n;
wire    ap_CS_fsm_state192;
wire   [63:0] grp_fu_311_p1;
reg   [63:0] reg_320;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state143;
wire   [63:0] grp_fu_253_p2;
reg   [63:0] reg_329;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state130;
wire   [63:0] grp_fu_216_p2;
reg   [63:0] reg_335;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state137;
wire    ap_CS_fsm_state148;
wire   [63:0] grp_fu_196_p2;
reg   [63:0] reg_344;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state147;
wire   [63:0] grp_fu_231_p2;
reg   [63:0] reg_350;
wire    ap_CS_fsm_state142;
wire    ap_CS_fsm_state166;
reg   [0:0] sel_tmp9_reg_1358;
reg   [63:0] reg_356;
wire    ap_CS_fsm_state155;
reg   [0:0] or_cond_demorgan_reg_1309;
wire    ap_CS_fsm_state160;
wire    ap_CS_fsm_state171;
wire    ap_CS_fsm_state183;
wire   [63:0] grp_fu_202_p2;
reg   [63:0] reg_365;
reg   [63:0] reg_372;
wire    ap_CS_fsm_state172;
wire    ap_CS_fsm_state178;
wire    ap_CS_fsm_state191;
wire   [63:0] grp_fu_225_p2;
reg   [63:0] reg_379;
reg   [63:0] reg_384;
wire    ap_CS_fsm_state173;
wire    ap_CS_fsm_state179;
reg   [31:0] vs_read_reg_1163;
reg   [31:0] L_read_reg_1169;
wire   [31:0] v_tmp_fu_396_p3;
reg   [31:0] v_tmp_reg_1174;
wire   [31:0] tmp_2_fu_404_p2;
reg   [31:0] tmp_2_reg_1181;
wire   [31:0] tmp_6_fu_410_p2;
reg   [31:0] tmp_6_reg_1186;
wire    ap_CS_fsm_state63;
wire   [63:0] grp_fu_315_p2;
reg   [63:0] tm_reg_1191;
reg   [0:0] p_Result_s_reg_1200;
wire    ap_CS_fsm_state93;
wire   [31:0] p_Val2_2_fu_620_p3;
reg   [31:0] p_Val2_2_reg_1205;
wire   [31:0] p_Val2_10_fu_633_p3;
wire    ap_CS_fsm_state94;
reg   [63:0] tmp_15_reg_1222;
reg   [63:0] tmp_21_reg_1228;
reg   [63:0] tmp_22_reg_1236;
wire   [63:0] grp_fu_207_p2;
reg   [63:0] tmp_24_reg_1243;
reg   [63:0] vo_reg_1250;
reg   [63:0] tmp_29_reg_1255;
wire   [0:0] tmp_35_fu_669_p2;
reg   [0:0] tmp_35_reg_1261;
wire   [63:0] tm2_to_int_fu_675_p1;
reg   [63:0] tm2_to_int_reg_1266;
wire   [0:0] notrhs6_fu_683_p2;
reg   [0:0] notrhs6_reg_1271;
wire   [63:0] tmp_27_to_int_fu_689_p1;
reg   [63:0] tmp_27_to_int_reg_1276;
wire   [0:0] notrhs4_fu_696_p2;
reg   [0:0] notrhs4_reg_1281;
wire   [63:0] tmp_28_to_int_fu_702_p1;
reg   [63:0] tmp_28_to_int_reg_1286;
wire   [0:0] notrhs5_fu_709_p2;
reg   [0:0] notrhs5_reg_1291;
wire   [63:0] tmp_30_to_int_fu_715_p1;
reg   [63:0] tmp_30_to_int_reg_1296;
wire   [0:0] notrhs7_fu_722_p2;
reg   [0:0] notrhs7_reg_1301;
wire   [0:0] or_cond_demorgan_fu_801_p2;
wire    ap_CS_fsm_state149;
wire   [0:0] tmp_38_fu_769_p2;
wire   [0:0] or_cond9_demorgan_fu_839_p2;
reg   [0:0] or_cond9_demorgan_reg_1315;
wire   [0:0] or_cond1_demorgan_fu_877_p2;
reg   [0:0] or_cond1_demorgan_reg_1321;
wire   [0:0] tmp_77_fu_904_p2;
reg   [0:0] tmp_77_reg_1327;
wire   [0:0] or_cond2_demorgan_fu_915_p2;
reg   [0:0] or_cond2_demorgan_reg_1332;
wire   [0:0] tmp_80_fu_306_p2;
reg   [0:0] tmp_80_reg_1338;
wire   [0:0] or_cond_fu_921_p2;
reg   [0:0] or_cond_reg_1343;
wire    ap_CS_fsm_state150;
wire   [0:0] sel_tmp5_fu_940_p2;
reg   [0:0] sel_tmp5_reg_1348;
wire   [0:0] sel_tmp6_fu_946_p2;
reg   [0:0] sel_tmp6_reg_1353;
wire   [0:0] sel_tmp9_fu_963_p2;
reg   [63:0] t_1_reg_1363;
wire    ap_CS_fsm_state165;
wire   [63:0] grp_fu_242_p2;
reg   [63:0] tmp_60_reg_1368;
wire   [63:0] grp_fu_246_p2;
reg   [63:0] tmp_64_reg_1373;
wire   [63:0] sel_tmp1_v_v_v_fu_969_p3;
reg   [63:0] sel_tmp1_v_v_v_reg_1378;
wire    ap_CS_fsm_state167;
reg   [63:0] vo_2_reg_1383;
wire    ap_CS_fsm_state177;
reg   [63:0] vo_3_reg_1388;
wire    ap_CS_fsm_state184;
wire   [63:0] vo_7_fu_1011_p3;
reg   [63:0] vo_7_reg_1393;
wire    ap_CS_fsm_state185;
reg   [0:0] p_Result_1_reg_1399;
wire    ap_CS_fsm_state186;
wire   [31:0] p_Val2_7_fu_1144_p3;
reg   [31:0] p_Val2_7_reg_1404;
wire   [31:0] p_Val2_9_fu_1157_p3;
reg   [31:0] p_Val2_9_reg_1410;
wire    ap_CS_fsm_state187;
reg   [31:0] v_tmp_1_reg_150;
wire    ap_CS_fsm_state131;
wire   [63:0] ap_phi_mux_tm2_phi_fu_164_p4;
reg   [63:0] tm2_reg_160;
wire   [63:0] ap_phi_mux_t3_s_phi_fu_176_p4;
reg   [63:0] t3_s_reg_172;
reg   [63:0] t_reg_184;
reg   [63:0] vo1_fu_106;
wire    ap_CS_fsm_state132;
reg   [63:0] grp_fu_196_p0;
reg   [63:0] grp_fu_196_p1;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state161;
wire    ap_CS_fsm_state180;
reg   [63:0] grp_fu_202_p0;
reg   [63:0] grp_fu_202_p1;
reg   [63:0] grp_fu_216_p0;
reg   [63:0] grp_fu_216_p1;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state174;
reg   [63:0] grp_fu_225_p0;
reg   [63:0] grp_fu_225_p1;
reg   [63:0] grp_fu_231_p0;
reg   [63:0] grp_fu_231_p1;
reg   [63:0] grp_fu_253_p0;
reg   [63:0] grp_fu_253_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state100;
reg   [63:0] grp_fu_258_p0;
reg   [63:0] grp_fu_258_p1;
reg   [31:0] grp_fu_311_p0;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state64;
wire   [0:0] tmp_20_fu_492_p2;
wire    ap_CS_fsm_state39;
wire   [0:0] tmp_1_fu_390_p2;
wire   [63:0] tmp_8_to_int_fu_414_p1;
wire   [63:0] tmp_9_to_int_fu_432_p1;
wire   [10:0] tmp_11_fu_418_p4;
wire   [51:0] tmp_12_fu_428_p1;
wire   [0:0] notrhs_fu_456_p2;
wire   [0:0] notlhs_fu_450_p2;
wire   [10:0] tmp_13_fu_436_p4;
wire   [51:0] tmp_14_fu_446_p1;
wire   [0:0] notrhs1_fu_474_p2;
wire   [0:0] notlhs1_fu_468_p2;
wire   [0:0] tmp_16_fu_462_p2;
wire   [0:0] tmp_17_fu_480_p2;
wire   [0:0] tmp_18_fu_486_p2;
wire   [0:0] grp_fu_258_p2;
wire   [63:0] p_Val2_s_fu_498_p1;
wire   [51:0] loc_V_1_fu_520_p1;
wire   [53:0] tmp_i_i_i_fu_524_p4;
wire   [10:0] loc_V_fu_510_p4;
wire   [11:0] tmp_i_i_i_i_cast_fu_538_p1;
wire   [11:0] sh_assign_fu_542_p2;
wire   [10:0] tmp_253_i_i_i_fu_556_p2;
wire   [0:0] isNeg_fu_548_p3;
wire  signed [11:0] tmp_253_i_i_i_cast_fu_562_p1;
wire   [11:0] sh_assign_1_fu_566_p3;
wire  signed [31:0] sh_assign_1_cast_fu_574_p1;
wire   [53:0] tmp_254_i_i_i_cast_fu_582_p1;
wire   [136:0] tmp_i_i_i_cast_fu_534_p1;
wire   [136:0] tmp_254_i_i_i_fu_578_p1;
wire   [53:0] tmp_255_i_i_i_fu_586_p2;
wire   [0:0] tmp_44_fu_598_p3;
wire   [136:0] tmp_256_i_i_i_fu_592_p2;
wire   [31:0] tmp_31_fu_606_p1;
wire   [31:0] tmp_33_fu_610_p4;
wire   [31:0] p_Val2_i_i_i_fu_628_p2;
wire   [63:0] total_to_int_fu_639_p1;
wire   [10:0] tmp_32_fu_643_p4;
wire   [51:0] tmp_45_fu_653_p1;
wire   [0:0] notrhs3_fu_663_p2;
wire   [0:0] notlhs3_fu_657_p2;
wire   [51:0] tmp_46_fu_679_p1;
wire   [51:0] tmp_50_fu_692_p1;
wire   [51:0] tmp_85_fu_705_p1;
wire   [51:0] tmp_88_fu_718_p1;
wire   [63:0] t_to_int_fu_728_p1;
wire   [10:0] tmp_30_fu_732_p4;
wire   [51:0] tmp_89_fu_742_p1;
wire   [0:0] notrhs2_fu_752_p2;
wire   [0:0] notlhs2_fu_746_p2;
wire   [0:0] tmp_34_fu_758_p2;
wire   [0:0] tmp_36_fu_764_p2;
wire   [10:0] tmp_41_fu_775_p4;
wire   [0:0] notlhs6_fu_784_p2;
wire   [0:0] tmp_42_fu_790_p2;
wire   [0:0] tmp_43_fu_269_p2;
wire   [0:0] tmp_39_fu_263_p2;
wire   [0:0] tmp_47_fu_795_p2;
wire   [0:0] tmp_53_fu_275_p2;
wire   [10:0] tmp_55_fu_813_p4;
wire   [0:0] notlhs4_fu_822_p2;
wire   [0:0] tmp_56_fu_828_p2;
wire   [0:0] tmp_65_fu_281_p2;
wire   [0:0] tmp_54_fu_807_p2;
wire   [0:0] tmp_66_fu_833_p2;
wire   [0:0] tmp_68_fu_286_p2;
wire   [10:0] tmp_70_fu_851_p4;
wire   [0:0] notlhs5_fu_860_p2;
wire   [0:0] tmp_71_fu_866_p2;
wire   [0:0] tmp_72_fu_291_p2;
wire   [0:0] tmp_69_fu_845_p2;
wire   [0:0] tmp_73_fu_871_p2;
wire   [0:0] tmp_74_fu_296_p2;
wire   [10:0] tmp_76_fu_889_p4;
wire   [0:0] notlhs7_fu_898_p2;
wire   [0:0] tmp_78_fu_301_p2;
wire   [0:0] tmp_75_fu_883_p2;
wire   [0:0] tmp_79_fu_909_p2;
wire   [0:0] or_cond9_fu_926_p2;
wire   [0:0] or_cond1_fu_931_p2;
wire   [0:0] tmp_81_fu_936_p2;
wire   [0:0] tmp_demorgan_fu_952_p2;
wire   [0:0] tmp_fu_957_p2;
wire   [0:0] sel_tmp3_fu_978_p2;
wire   [0:0] sel_tmp8_fu_989_p2;
wire   [63:0] vo_4_fu_982_p3;
wire   [0:0] sel_tmp1_fu_1000_p2;
wire   [63:0] vo_5_fu_993_p3;
wire   [63:0] vo_6_fu_1004_p3;
wire   [63:0] p_Val2_5_fu_1023_p1;
wire   [51:0] loc_V_3_fu_1044_p1;
wire   [53:0] tmp_i_i_i1_fu_1048_p4;
wire   [10:0] loc_V_2_fu_1034_p4;
wire   [11:0] tmp_i_i_i_i1_cast_fu_1062_p1;
wire   [11:0] sh_assign_2_fu_1066_p2;
wire   [10:0] tmp_253_i_i_i1_fu_1080_p2;
wire   [0:0] isNeg_1_fu_1072_p3;
wire  signed [11:0] tmp_253_i_i_i1_cast_fu_1086_p1;
wire   [11:0] sh_assign_3_fu_1090_p3;
wire  signed [31:0] sh_assign_3_cast_fu_1098_p1;
wire   [53:0] tmp_254_i_i_i1_cast_fu_1106_p1;
wire   [136:0] tmp_i_i_i1_cast_fu_1058_p1;
wire   [136:0] tmp_254_i_i_i1_fu_1102_p1;
wire   [53:0] tmp_255_i_i_i1_fu_1110_p2;
wire   [0:0] tmp_93_fu_1122_p3;
wire   [136:0] tmp_256_i_i_i1_fu_1116_p2;
wire   [31:0] tmp_82_fu_1130_p1;
wire   [31:0] tmp_83_fu_1134_p4;
wire   [31:0] p_Val2_i_i_i1_fu_1152_p2;
reg   [1:0] grp_fu_196_opcode;
reg   [1:0] grp_fu_202_opcode;
reg   [4:0] grp_fu_258_opcode;
reg   [191:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 192'd1;
#0 e_V_1_vld_reg = 1'b0;
end

scurve_scrv_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_SCRV_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_SCRV_DATA_WIDTH ))
scurve_scrv_s_axi_U(
    .AWVALID(s_axi_scrv_AWVALID),
    .AWREADY(s_axi_scrv_AWREADY),
    .AWADDR(s_axi_scrv_AWADDR),
    .WVALID(s_axi_scrv_WVALID),
    .WREADY(s_axi_scrv_WREADY),
    .WDATA(s_axi_scrv_WDATA),
    .WSTRB(s_axi_scrv_WSTRB),
    .ARVALID(s_axi_scrv_ARVALID),
    .ARREADY(s_axi_scrv_ARREADY),
    .ARADDR(s_axi_scrv_ARADDR),
    .RVALID(s_axi_scrv_RVALID),
    .RREADY(s_axi_scrv_RREADY),
    .RDATA(s_axi_scrv_RDATA),
    .RRESP(s_axi_scrv_RRESP),
    .BVALID(s_axi_scrv_BVALID),
    .BREADY(s_axi_scrv_BREADY),
    .BRESP(s_axi_scrv_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .L(L),
    .J(J),
    .vs(vs),
    .ve(ve),
    .v(v),
    .freq(reg_372),
    .freq_ap_vld(freq_ap_vld)
);

scurve_dadddsub_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dadddsub_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_196_p0),
    .din1(grp_fu_196_p1),
    .opcode(grp_fu_196_opcode),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

scurve_dadddsub_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dadddsub_6bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_202_p0),
    .din1(grp_fu_202_p1),
    .opcode(grp_fu_202_opcode),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

scurve_dadd_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dadd_64ns_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_350),
    .din1(t3_s_reg_172),
    .ce(1'b1),
    .dout(grp_fu_207_p2)
);

scurve_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dmul_64ns_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_216_p0),
    .din1(grp_fu_216_p1),
    .ce(1'b1),
    .dout(grp_fu_216_p2)
);

scurve_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dmul_64ns_dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_225_p0),
    .din1(grp_fu_225_p1),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

scurve_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dmul_64ns_dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_231_p0),
    .din1(grp_fu_231_p1),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

scurve_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dmul_64ns_dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_356),
    .din1(reg_356),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

scurve_dmul_64ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dmul_64ns_dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_365),
    .din1(reg_365),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

scurve_ddiv_64ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_ddiv_64ns_eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_253_p0),
    .din1(grp_fu_253_p1),
    .ce(1'b1),
    .dout(grp_fu_253_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U10(
    .din0(grp_fu_258_p0),
    .din1(grp_fu_258_p1),
    .opcode(grp_fu_258_opcode),
    .dout(grp_fu_258_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U11(
    .din0(t_reg_184),
    .din1(64'd0),
    .opcode(5'd3),
    .dout(tmp_39_fu_263_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U12(
    .din0(t_reg_184),
    .din1(tm2_reg_160),
    .opcode(5'd5),
    .dout(tmp_43_fu_269_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U13(
    .din0(t_reg_184),
    .din1(tm2_reg_160),
    .opcode(5'd2),
    .dout(tmp_53_fu_275_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U14(
    .din0(t_reg_184),
    .din1(tmp_21_reg_1228),
    .opcode(5'd5),
    .dout(tmp_65_fu_281_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U15(
    .din0(t_reg_184),
    .din1(tmp_21_reg_1228),
    .opcode(5'd2),
    .dout(tmp_68_fu_286_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U16(
    .din0(t_reg_184),
    .din1(tmp_22_reg_1236),
    .opcode(5'd5),
    .dout(tmp_72_fu_291_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U17(
    .din0(t_reg_184),
    .din1(tmp_22_reg_1236),
    .opcode(5'd2),
    .dout(tmp_74_fu_296_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U18(
    .din0(t_reg_184),
    .din1(tmp_24_reg_1243),
    .opcode(5'd5),
    .dout(tmp_78_fu_301_p2)
);

scurve_dcmp_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
scurve_dcmp_64ns_fYi_U19(
    .din0(t_reg_184),
    .din1(tmp_24_reg_1243),
    .opcode(5'd2),
    .dout(tmp_80_fu_306_p2)
);

scurve_sitodp_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
scurve_sitodp_32ng8j_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_311_p0),
    .ce(1'b1),
    .dout(grp_fu_311_p1)
);

scurve_dsqrt_64nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scurve_dsqrt_64nshbi_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(reg_329),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((vout_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state192))) begin
        t_reg_184 <= t_1_reg_1363;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        t_reg_184 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        tm2_reg_160 <= 64'd4626322717216342016;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        tm2_reg_160 <= tm_reg_1191;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        v_tmp_1_reg_150 <= p_Val2_10_fu_633_p3;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        v_tmp_1_reg_150 <= v_tmp_reg_1174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        L_read_reg_1169 <= L;
        tmp_2_reg_1181 <= tmp_2_fu_404_p2;
        v_tmp_reg_1174 <= v_tmp_fu_396_p3;
        vs_read_reg_1163 <= vs;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        notrhs4_reg_1281 <= notrhs4_fu_696_p2;
        notrhs5_reg_1291 <= notrhs5_fu_709_p2;
        notrhs6_reg_1271 <= notrhs6_fu_683_p2;
        notrhs7_reg_1301 <= notrhs7_fu_722_p2;
        tm2_to_int_reg_1266 <= tm2_to_int_fu_675_p1;
        tmp_27_to_int_reg_1276 <= tmp_27_to_int_fu_689_p1;
        tmp_28_to_int_reg_1286 <= tmp_28_to_int_fu_702_p1;
        tmp_29_reg_1255 <= grp_fu_196_p2;
        tmp_30_to_int_reg_1296 <= tmp_30_to_int_fu_715_p1;
        tmp_35_reg_1261 <= tmp_35_fu_669_p2;
        vo_reg_1250 <= grp_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_38_fu_769_p2 == 1'd1) & (e_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
        or_cond1_demorgan_reg_1321 <= or_cond1_demorgan_fu_877_p2;
        or_cond2_demorgan_reg_1332 <= or_cond2_demorgan_fu_915_p2;
        or_cond9_demorgan_reg_1315 <= or_cond9_demorgan_fu_839_p2;
        or_cond_demorgan_reg_1309 <= or_cond_demorgan_fu_801_p2;
        tmp_77_reg_1327 <= tmp_77_fu_904_p2;
        tmp_80_reg_1338 <= tmp_80_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        or_cond_reg_1343 <= or_cond_fu_921_p2;
        sel_tmp5_reg_1348 <= sel_tmp5_fu_940_p2;
        sel_tmp6_reg_1353 <= sel_tmp6_fu_946_p2;
        sel_tmp9_reg_1358 <= sel_tmp9_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state186)) begin
        p_Result_1_reg_1399 <= p_Val2_5_fu_1023_p1[32'd63];
        p_Val2_7_reg_1404 <= p_Val2_7_fu_1144_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        p_Result_s_reg_1200 <= p_Val2_s_fu_498_p1[32'd63];
        p_Val2_2_reg_1205 <= p_Val2_2_fu_620_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state187)) begin
        p_Val2_9_reg_1410 <= p_Val2_9_fu_1157_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_320 <= grp_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_329 <= grp_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state81))) begin
        reg_335 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state92))) begin
        reg_344 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state142) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state166)))) begin
        reg_350 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state183)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state171)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state160)) | ((or_cond_demorgan_reg_1309 == 1'd0) & (sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state155)))) begin
        reg_356 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state171)) | ((or_cond_demorgan_reg_1309 == 1'd0) & (sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state160)))) begin
        reg_365 <= grp_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state191) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state178)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state172)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state166)))) begin
        reg_372 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state172)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state166)))) begin
        reg_379 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state179)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state173)))) begin
        reg_384 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state167))) begin
        sel_tmp1_v_v_v_reg_1378 <= sel_tmp1_v_v_v_fu_969_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        t3_s_reg_172 <= reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        t_1_reg_1363 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tm_reg_1191 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        tmp_15_reg_1222 <= grp_fu_216_p2;
        tmp_21_reg_1228 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        tmp_22_reg_1236 <= grp_fu_202_p2;
        tmp_24_reg_1243 <= grp_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        tmp_60_reg_1368 <= grp_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_demorgan_reg_1309 == 1'd0) & (sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        tmp_64_reg_1373 <= grp_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_6_reg_1186 <= tmp_6_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state185)) begin
        vo1_fu_106 <= vo_7_fu_1011_p3;
        vo_7_reg_1393 <= vo_7_fu_1011_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state177))) begin
        vo_2_reg_1383 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state184))) begin
        vo_3_reg_1388 <= grp_fu_196_p2;
    end
end

always @ (*) begin
    if (((tmp_38_fu_769_p2 == 1'd0) & (e_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_38_fu_769_p2 == 1'd0) & (e_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((e_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (e_V_1_vld_reg == 1'b1)))) begin
        e_V_1_ack_in = 1'b1;
    end else begin
        e_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((vout_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state192))) begin
        freq_ap_vld = 1'b1;
    end else begin
        freq_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) | ((tmp_20_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state156)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state179)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state173)) | ((or_cond_demorgan_reg_1309 == 1'd0) & (sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state151)))) begin
        grp_fu_196_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state143) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state180)) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state167)))) begin
        grp_fu_196_opcode = 2'd0;
    end else begin
        grp_fu_196_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        grp_fu_196_p0 = reg_356;
    end else if ((1'b1 == ap_CS_fsm_state173)) begin
        grp_fu_196_p0 = reg_365;
    end else if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_196_p0 = tmp_29_reg_1255;
    end else if (((1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state151))) begin
        grp_fu_196_p0 = t_reg_184;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_196_p0 = tmp_15_reg_1222;
    end else if (((1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state82))) begin
        grp_fu_196_p0 = reg_320;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state180)) begin
        grp_fu_196_p1 = reg_384;
    end else if ((1'b1 == ap_CS_fsm_state179)) begin
        grp_fu_196_p1 = reg_372;
    end else if (((1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state173))) begin
        grp_fu_196_p1 = reg_379;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_196_p1 = 64'd4576918229304087675;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        grp_fu_196_p1 = t3_s_reg_172;
    end else if ((1'b1 == ap_CS_fsm_state151)) begin
        grp_fu_196_p1 = tmp_15_reg_1222;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_196_p1 = ap_phi_mux_t3_s_phi_fu_176_p4;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_196_p1 = 64'd4616189618054758400;
    end else if (((1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state82))) begin
        grp_fu_196_p1 = reg_335;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if (((or_cond_demorgan_reg_1309 == 1'd0) & (sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state156))) begin
        grp_fu_202_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state143) | ((sel_tmp9_reg_1358 == 1'd0) & (1'b1 == ap_CS_fsm_state167)))) begin
        grp_fu_202_opcode = 2'd0;
    end else begin
        grp_fu_202_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_202_p0 = tmp_29_reg_1255;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        grp_fu_202_p0 = reg_356;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_202_p0 = tmp_21_reg_1228;
    end else begin
        grp_fu_202_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_202_p1 = reg_350;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        grp_fu_202_p1 = t3_s_reg_172;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_202_p1 = ap_phi_mux_t3_s_phi_fu_176_p4;
    end else begin
        grp_fu_202_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state186)) begin
        grp_fu_216_p0 = vo_7_reg_1393;
    end else if ((1'b1 == ap_CS_fsm_state174)) begin
        grp_fu_216_p0 = reg_384;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        grp_fu_216_p0 = sel_tmp1_v_v_v_reg_1378;
    end else if (((1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state173))) begin
        grp_fu_216_p0 = reg_372;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_216_p0 = t_reg_184;
    end else if (((1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state143))) begin
        grp_fu_216_p0 = tm2_reg_160;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        grp_fu_216_p0 = ap_phi_mux_tm2_phi_fu_164_p4;
    end else if (((1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_fu_216_p0 = reg_335;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_216_p0 = reg_320;
    end else begin
        grp_fu_216_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state186)) begin
        grp_fu_216_p1 = 64'd4603094051058290472;
    end else if (((1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state173))) begin
        grp_fu_216_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_216_p1 = t_reg_184;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_216_p1 = 64'd4581421828931458171;
    end else if (((1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state167))) begin
        grp_fu_216_p1 = 64'd4576918229304087675;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_216_p1 = 64'd4616189618054758400;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        grp_fu_216_p1 = tm2_reg_160;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_216_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_216_p1 = tm_reg_1191;
    end else begin
        grp_fu_216_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_225_p0 = tmp_60_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_225_p0 = reg_335;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_225_p0 = tm2_reg_160;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        grp_fu_225_p1 = 64'd4572414629676717179;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_225_p1 = t_reg_184;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_225_p1 = 64'd4611686018427387904;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_231_p0 = reg_335;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_231_p0 = tm2_reg_160;
    end else begin
        grp_fu_231_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_fu_231_p1 = reg_356;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        grp_fu_231_p1 = 64'd4613937818241073152;
    end else begin
        grp_fu_231_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_253_p0 = reg_344;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_253_p0 = reg_320;
    end else begin
        grp_fu_253_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_253_p1 = reg_320;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_253_p1 = 64'd4576918229304087675;
    end else begin
        grp_fu_253_p1 = 'bx;
    end
end

always @ (*) begin
    if (((e_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
        grp_fu_258_opcode = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_258_opcode = 5'd2;
    end else begin
        grp_fu_258_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_fu_258_p0 = t_reg_184;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_258_p0 = reg_320;
    end else begin
        grp_fu_258_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_fu_258_p1 = reg_344;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_258_p1 = reg_335;
    end else begin
        grp_fu_258_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        grp_fu_311_p0 = v_tmp_1_reg_150;
    end else if (((tmp_20_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82))) begin
        grp_fu_311_p0 = v_tmp_reg_1174;
    end else if (((1'b1 == ap_CS_fsm_state138) | ((tmp_20_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state82)))) begin
        grp_fu_311_p0 = vs_read_reg_1163;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_311_p0 = L_read_reg_1169;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_311_p0 = tmp_6_reg_1186;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_311_p0 = tmp_2_reg_1181;
    end else begin
        grp_fu_311_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state192)) begin
        vout_blk_n = vout_full_n;
    end else begin
        vout_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((vout_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state192))) begin
        vout_write = 1'b1;
    end else begin
        vout_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((tmp_20_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            if (((tmp_38_fu_769_p2 == 1'd0) & (e_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((tmp_38_fu_769_p2 == 1'd1) & (e_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            if (((vout_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state192))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state192;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state172 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state174 = ap_CS_fsm[32'd173];

assign ap_CS_fsm_state177 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state178 = ap_CS_fsm[32'd177];

assign ap_CS_fsm_state179 = ap_CS_fsm[32'd178];

assign ap_CS_fsm_state180 = ap_CS_fsm[32'd179];

assign ap_CS_fsm_state183 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state184 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state185 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state186 = ap_CS_fsm[32'd185];

assign ap_CS_fsm_state187 = ap_CS_fsm[32'd186];

assign ap_CS_fsm_state191 = ap_CS_fsm[32'd190];

assign ap_CS_fsm_state192 = ap_CS_fsm[32'd191];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_phi_mux_t3_s_phi_fu_176_p4 = t3_s_reg_172;

assign ap_phi_mux_tm2_phi_fu_164_p4 = tm2_reg_160;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign e_V = 1'd0;

assign isNeg_1_fu_1072_p3 = sh_assign_2_fu_1066_p2[32'd11];

assign isNeg_fu_548_p3 = sh_assign_fu_542_p2[32'd11];

assign loc_V_1_fu_520_p1 = p_Val2_s_fu_498_p1[51:0];

assign loc_V_2_fu_1034_p4 = {{p_Val2_5_fu_1023_p1[62:52]}};

assign loc_V_3_fu_1044_p1 = p_Val2_5_fu_1023_p1[51:0];

assign loc_V_fu_510_p4 = {{p_Val2_s_fu_498_p1[62:52]}};

assign notlhs1_fu_468_p2 = ((tmp_13_fu_436_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs2_fu_746_p2 = ((tmp_30_fu_732_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs3_fu_657_p2 = ((tmp_32_fu_643_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs4_fu_822_p2 = ((tmp_55_fu_813_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs5_fu_860_p2 = ((tmp_70_fu_851_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs6_fu_784_p2 = ((tmp_41_fu_775_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs7_fu_898_p2 = ((tmp_76_fu_889_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs_fu_450_p2 = ((tmp_11_fu_418_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs1_fu_474_p2 = ((tmp_14_fu_446_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_752_p2 = ((tmp_89_fu_742_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_663_p2 = ((tmp_45_fu_653_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_696_p2 = ((tmp_50_fu_692_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs5_fu_709_p2 = ((tmp_85_fu_705_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs6_fu_683_p2 = ((tmp_46_fu_679_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs7_fu_722_p2 = ((tmp_88_fu_718_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_456_p2 = ((tmp_12_fu_428_p1 == 52'd0) ? 1'b1 : 1'b0);

assign or_cond1_demorgan_fu_877_p2 = (tmp_73_fu_871_p2 & tmp_69_fu_845_p2);

assign or_cond1_fu_931_p2 = (or_cond1_demorgan_reg_1321 ^ 1'd1);

assign or_cond2_demorgan_fu_915_p2 = (tmp_79_fu_909_p2 & tmp_75_fu_883_p2);

assign or_cond9_demorgan_fu_839_p2 = (tmp_66_fu_833_p2 & tmp_54_fu_807_p2);

assign or_cond9_fu_926_p2 = (or_cond9_demorgan_reg_1315 ^ 1'd1);

assign or_cond_demorgan_fu_801_p2 = (tmp_47_fu_795_p2 & tmp_39_fu_263_p2);

assign or_cond_fu_921_p2 = (or_cond_demorgan_reg_1309 ^ 1'd1);

assign p_Val2_10_fu_633_p3 = ((p_Result_s_reg_1200[0:0] === 1'b1) ? p_Val2_i_i_i_fu_628_p2 : p_Val2_2_reg_1205);

assign p_Val2_2_fu_620_p3 = ((isNeg_fu_548_p3[0:0] === 1'b1) ? tmp_31_fu_606_p1 : tmp_33_fu_610_p4);

assign p_Val2_5_fu_1023_p1 = vo_7_reg_1393;

assign p_Val2_7_fu_1144_p3 = ((isNeg_1_fu_1072_p3[0:0] === 1'b1) ? tmp_82_fu_1130_p1 : tmp_83_fu_1134_p4);

assign p_Val2_9_fu_1157_p3 = ((p_Result_1_reg_1399[0:0] === 1'b1) ? p_Val2_i_i_i1_fu_1152_p2 : p_Val2_7_reg_1404);

assign p_Val2_i_i_i1_fu_1152_p2 = (32'd0 - p_Val2_7_reg_1404);

assign p_Val2_i_i_i_fu_628_p2 = (32'd0 - p_Val2_2_reg_1205);

assign p_Val2_s_fu_498_p1 = reg_344;

assign sel_tmp1_fu_1000_p2 = (sel_tmp5_reg_1348 & or_cond1_demorgan_reg_1321);

assign sel_tmp1_v_v_v_fu_969_p3 = ((or_cond_demorgan_reg_1309[0:0] === 1'b1) ? reg_372 : tmp_64_reg_1373);

assign sel_tmp3_fu_978_p2 = (or_cond_reg_1343 & or_cond9_demorgan_reg_1315);

assign sel_tmp5_fu_940_p2 = (or_cond_fu_921_p2 & or_cond9_fu_926_p2);

assign sel_tmp6_fu_946_p2 = (sel_tmp5_fu_940_p2 & or_cond1_fu_931_p2);

assign sel_tmp8_fu_989_p2 = (sel_tmp6_reg_1353 & or_cond2_demorgan_reg_1332);

assign sel_tmp9_fu_963_p2 = (tmp_fu_957_p2 & sel_tmp6_fu_946_p2);

assign sh_assign_1_cast_fu_574_p1 = $signed(sh_assign_1_fu_566_p3);

assign sh_assign_1_fu_566_p3 = ((isNeg_fu_548_p3[0:0] === 1'b1) ? tmp_253_i_i_i_cast_fu_562_p1 : sh_assign_fu_542_p2);

assign sh_assign_2_fu_1066_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i1_cast_fu_1062_p1));

assign sh_assign_3_cast_fu_1098_p1 = $signed(sh_assign_3_fu_1090_p3);

assign sh_assign_3_fu_1090_p3 = ((isNeg_1_fu_1072_p3[0:0] === 1'b1) ? tmp_253_i_i_i1_cast_fu_1086_p1 : sh_assign_2_fu_1066_p2);

assign sh_assign_fu_542_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast_fu_538_p1));

assign t_to_int_fu_728_p1 = t_reg_184;

assign tm2_to_int_fu_675_p1 = tm2_reg_160;

assign tmp_11_fu_418_p4 = {{tmp_8_to_int_fu_414_p1[62:52]}};

assign tmp_12_fu_428_p1 = tmp_8_to_int_fu_414_p1[51:0];

assign tmp_13_fu_436_p4 = {{tmp_9_to_int_fu_432_p1[62:52]}};

assign tmp_14_fu_446_p1 = tmp_9_to_int_fu_432_p1[51:0];

assign tmp_16_fu_462_p2 = (notrhs_fu_456_p2 | notlhs_fu_450_p2);

assign tmp_17_fu_480_p2 = (notrhs1_fu_474_p2 | notlhs1_fu_468_p2);

assign tmp_18_fu_486_p2 = (tmp_17_fu_480_p2 & tmp_16_fu_462_p2);

assign tmp_1_fu_390_p2 = ((v == 32'd0) ? 1'b1 : 1'b0);

assign tmp_20_fu_492_p2 = (tmp_18_fu_486_p2 & grp_fu_258_p2);

assign tmp_253_i_i_i1_cast_fu_1086_p1 = $signed(tmp_253_i_i_i1_fu_1080_p2);

assign tmp_253_i_i_i1_fu_1080_p2 = (11'd1023 - loc_V_2_fu_1034_p4);

assign tmp_253_i_i_i_cast_fu_562_p1 = $signed(tmp_253_i_i_i_fu_556_p2);

assign tmp_253_i_i_i_fu_556_p2 = (11'd1023 - loc_V_fu_510_p4);

assign tmp_254_i_i_i1_cast_fu_1106_p1 = $unsigned(sh_assign_3_cast_fu_1098_p1);

assign tmp_254_i_i_i1_fu_1102_p1 = $unsigned(sh_assign_3_cast_fu_1098_p1);

assign tmp_254_i_i_i_cast_fu_582_p1 = $unsigned(sh_assign_1_cast_fu_574_p1);

assign tmp_254_i_i_i_fu_578_p1 = $unsigned(sh_assign_1_cast_fu_574_p1);

assign tmp_255_i_i_i1_fu_1110_p2 = tmp_i_i_i1_fu_1048_p4 >> tmp_254_i_i_i1_cast_fu_1106_p1;

assign tmp_255_i_i_i_fu_586_p2 = tmp_i_i_i_fu_524_p4 >> tmp_254_i_i_i_cast_fu_582_p1;

assign tmp_256_i_i_i1_fu_1116_p2 = tmp_i_i_i1_cast_fu_1058_p1 << tmp_254_i_i_i1_fu_1102_p1;

assign tmp_256_i_i_i_fu_592_p2 = tmp_i_i_i_cast_fu_534_p1 << tmp_254_i_i_i_fu_578_p1;

assign tmp_27_to_int_fu_689_p1 = tmp_21_reg_1228;

assign tmp_28_to_int_fu_702_p1 = tmp_22_reg_1236;

assign tmp_2_fu_404_p2 = (v_tmp_fu_396_p3 - vs);

assign tmp_30_fu_732_p4 = {{t_to_int_fu_728_p1[62:52]}};

assign tmp_30_to_int_fu_715_p1 = tmp_24_reg_1243;

assign tmp_31_fu_606_p1 = tmp_44_fu_598_p3;

assign tmp_32_fu_643_p4 = {{total_to_int_fu_639_p1[62:52]}};

assign tmp_33_fu_610_p4 = {{tmp_256_i_i_i_fu_592_p2[84:53]}};

assign tmp_34_fu_758_p2 = (notrhs2_fu_752_p2 | notlhs2_fu_746_p2);

assign tmp_35_fu_669_p2 = (notrhs3_fu_663_p2 | notlhs3_fu_657_p2);

assign tmp_36_fu_764_p2 = (tmp_35_reg_1261 & tmp_34_fu_758_p2);

assign tmp_38_fu_769_p2 = (tmp_36_fu_764_p2 & grp_fu_258_p2);

assign tmp_41_fu_775_p4 = {{tm2_to_int_reg_1266[62:52]}};

assign tmp_42_fu_790_p2 = (notrhs6_reg_1271 | notlhs6_fu_784_p2);

assign tmp_44_fu_598_p3 = tmp_255_i_i_i_fu_586_p2[32'd53];

assign tmp_45_fu_653_p1 = total_to_int_fu_639_p1[51:0];

assign tmp_46_fu_679_p1 = tm2_to_int_fu_675_p1[51:0];

assign tmp_47_fu_795_p2 = (tmp_43_fu_269_p2 & tmp_42_fu_790_p2);

assign tmp_50_fu_692_p1 = tmp_27_to_int_fu_689_p1[51:0];

assign tmp_54_fu_807_p2 = (tmp_53_fu_275_p2 & tmp_42_fu_790_p2);

assign tmp_55_fu_813_p4 = {{tmp_27_to_int_reg_1276[62:52]}};

assign tmp_56_fu_828_p2 = (notrhs4_reg_1281 | notlhs4_fu_822_p2);

assign tmp_66_fu_833_p2 = (tmp_65_fu_281_p2 & tmp_56_fu_828_p2);

assign tmp_69_fu_845_p2 = (tmp_68_fu_286_p2 & tmp_56_fu_828_p2);

assign tmp_6_fu_410_p2 = (vs_read_reg_1163 + v_tmp_reg_1174);

assign tmp_70_fu_851_p4 = {{tmp_28_to_int_reg_1286[62:52]}};

assign tmp_71_fu_866_p2 = (notrhs5_reg_1291 | notlhs5_fu_860_p2);

assign tmp_73_fu_871_p2 = (tmp_72_fu_291_p2 & tmp_71_fu_866_p2);

assign tmp_75_fu_883_p2 = (tmp_74_fu_296_p2 & tmp_71_fu_866_p2);

assign tmp_76_fu_889_p4 = {{tmp_30_to_int_reg_1296[62:52]}};

assign tmp_77_fu_904_p2 = (notrhs7_reg_1301 | notlhs7_fu_898_p2);

assign tmp_79_fu_909_p2 = (tmp_78_fu_301_p2 & tmp_77_fu_904_p2);

assign tmp_81_fu_936_p2 = (tmp_80_reg_1338 & tmp_77_reg_1327);

assign tmp_82_fu_1130_p1 = tmp_93_fu_1122_p3;

assign tmp_83_fu_1134_p4 = {{tmp_256_i_i_i1_fu_1116_p2[84:53]}};

assign tmp_85_fu_705_p1 = tmp_28_to_int_fu_702_p1[51:0];

assign tmp_88_fu_718_p1 = tmp_30_to_int_fu_715_p1[51:0];

assign tmp_89_fu_742_p1 = t_to_int_fu_728_p1[51:0];

assign tmp_8_to_int_fu_414_p1 = reg_320;

assign tmp_93_fu_1122_p3 = tmp_255_i_i_i1_fu_1110_p2[32'd53];

assign tmp_9_to_int_fu_432_p1 = reg_335;

assign tmp_demorgan_fu_952_p2 = (tmp_81_fu_936_p2 | or_cond2_demorgan_reg_1332);

assign tmp_fu_957_p2 = (tmp_demorgan_fu_952_p2 ^ 1'd1);

assign tmp_i_i_i1_cast_fu_1058_p1 = tmp_i_i_i1_fu_1048_p4;

assign tmp_i_i_i1_fu_1048_p4 = {{{{1'd1}, {loc_V_3_fu_1044_p1}}}, {1'd0}};

assign tmp_i_i_i_cast_fu_534_p1 = tmp_i_i_i_fu_524_p4;

assign tmp_i_i_i_fu_524_p4 = {{{{1'd1}, {loc_V_1_fu_520_p1}}}, {1'd0}};

assign tmp_i_i_i_i1_cast_fu_1062_p1 = loc_V_2_fu_1034_p4;

assign tmp_i_i_i_i_cast_fu_538_p1 = loc_V_fu_510_p4;

assign total_to_int_fu_639_p1 = reg_344;

assign v_tmp_fu_396_p3 = ((tmp_1_fu_390_p2[0:0] === 1'b1) ? 32'd1 : v);

assign vo_4_fu_982_p3 = ((sel_tmp3_fu_978_p2[0:0] === 1'b1) ? reg_356 : vo_3_reg_1388);

assign vo_5_fu_993_p3 = ((sel_tmp8_fu_989_p2[0:0] === 1'b1) ? vo_2_reg_1383 : vo_4_fu_982_p3);

assign vo_6_fu_1004_p3 = ((sel_tmp1_fu_1000_p2[0:0] === 1'b1) ? vo_reg_1250 : vo_5_fu_993_p3);

assign vo_7_fu_1011_p3 = ((sel_tmp9_reg_1358[0:0] === 1'b1) ? vo1_fu_106 : vo_6_fu_1004_p3);

assign vout_din = p_Val2_9_reg_1410;

endmodule //scurve
