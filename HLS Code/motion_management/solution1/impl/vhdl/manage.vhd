-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity manage is
generic (
    C_S_AXI_MAN_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_MAN_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sensor : IN STD_LOGIC;
    forward : OUT STD_LOGIC;
    back : OUT STD_LOGIC;
    current_count : IN STD_LOGIC_VECTOR (31 downto 0);
    freq : OUT STD_LOGIC_VECTOR (31 downto 0);
    enable : OUT STD_LOGIC;
    s_axi_man_AWVALID : IN STD_LOGIC;
    s_axi_man_AWREADY : OUT STD_LOGIC;
    s_axi_man_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_MAN_ADDR_WIDTH-1 downto 0);
    s_axi_man_WVALID : IN STD_LOGIC;
    s_axi_man_WREADY : OUT STD_LOGIC;
    s_axi_man_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_MAN_DATA_WIDTH-1 downto 0);
    s_axi_man_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_MAN_DATA_WIDTH/8-1 downto 0);
    s_axi_man_ARVALID : IN STD_LOGIC;
    s_axi_man_ARREADY : OUT STD_LOGIC;
    s_axi_man_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_MAN_ADDR_WIDTH-1 downto 0);
    s_axi_man_RVALID : OUT STD_LOGIC;
    s_axi_man_RREADY : IN STD_LOGIC;
    s_axi_man_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_MAN_DATA_WIDTH-1 downto 0);
    s_axi_man_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_man_BVALID : OUT STD_LOGIC;
    s_axi_man_BREADY : IN STD_LOGIC;
    s_axi_man_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of manage is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "manage,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.555000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=2405,HLS_SYN_LUT=4595,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (99 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (99 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (99 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (99 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (99 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (99 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (99 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (99 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (99 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (99 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_35D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_FCE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111111001110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv31_35D : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001101011101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_5F5E10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010111110101111000010000";
    constant ap_const_lv32_23B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal homing : STD_LOGIC_VECTOR (31 downto 0);
    signal f_ap_vld : STD_LOGIC;
    signal k : STD_LOGIC_VECTOR (31 downto 0);
    signal monitor : STD_LOGIC;
    signal monitor_read_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_read_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_945 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sensor_read_read_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal isNeg_2_fu_283_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_5_fu_295_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_reg_989 : STD_LOGIC_VECTOR (8 downto 0);
    signal smax_cast_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_2_cast_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_2_cast_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_3_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_8_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_16_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_628_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_745_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_18_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal p_Val2_14_fu_874_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_3_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_3_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_fu_898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal p_Val2_4_fu_909_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_1_be_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_1_be_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_4_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal h_count_1_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal tmp_18_pn_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_pn_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_count_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_preg : STD_LOGIC := '0';
    signal back_preg : STD_LOGIC := '0';
    signal forward_preg : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal freq_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_216_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast1_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_fu_277_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_i_i_i1_cast_fu_291_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_303_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_307_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_319_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal h_count_2_fu_323_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal loc_V_9_fu_335_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_i_i_i1_fu_338_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_5_cast_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_355_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_i_i_i1_cast2_fu_348_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_17_i_i_i1_fu_358_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_i_i_i1_fu_362_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_20_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_i1_fu_368_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_10_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_386_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_7_fu_434_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_i_i_i4_fu_437_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i4_cast3_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_8_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_4_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i4_cast_fu_469_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_fu_473_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_9_cast_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_9_cast_cas_fu_485_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_i_i_i4_cast4_fu_447_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_17_i_i_i4_fu_489_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_i_i_i4_fu_493_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_40_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_i4_fu_499_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_23_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_517_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_5_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_i_i_i3_fu_538_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i3_cast5_fu_552_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_fu_556_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_3_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i3_cast_fu_570_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_fu_574_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_7_cast_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_7_cast_cas_fu_586_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_i_i_i3_cast6_fu_548_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_17_i_i_i3_fu_590_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_i_i_i3_fu_594_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_36_fu_606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_i3_fu_600_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_21_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_618_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_3_fu_652_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_i_i_i2_fu_655_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i2_cast7_fu_669_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_673_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_1_fu_679_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i2_cast_fu_687_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_691_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_703_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_i_i_i2_cast8_fu_665_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_17_i_i_i2_fu_707_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_i_i_i2_fu_711_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_32_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_i2_fu_717_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_735_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_753_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_i_i_i_fu_756_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i_cast9_fu_770_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_774_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i_cast_fu_788_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_792_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_800_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_804_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_i_i_i_cast1_fu_766_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_17_i_i_i_fu_808_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_18_i_i_i_fu_812_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_28_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_i_i_fu_818_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_14_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_836_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i4_fu_858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i3_fu_869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_886_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_Val2_6_i_i_i2_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_921_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_403_ap_start : STD_LOGIC;
    signal grp_fu_403_ap_done : STD_LOGIC;
    signal grp_fu_886_ap_start : STD_LOGIC;
    signal grp_fu_886_ap_done : STD_LOGIC;
    signal grp_fu_921_ap_start : STD_LOGIC;
    signal grp_fu_921_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (99 downto 0);

    component manage_sitofp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component manage_sdiv_25ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component manage_man_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        homing : OUT STD_LOGIC_VECTOR (31 downto 0);
        f : IN STD_LOGIC_VECTOR (31 downto 0);
        f_ap_vld : IN STD_LOGIC;
        k : OUT STD_LOGIC_VECTOR (31 downto 0);
        monitor : OUT STD_LOGIC );
    end component;



begin
    manage_man_s_axi_U : component manage_man_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_MAN_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_MAN_DATA_WIDTH)
    port map (
        AWVALID => s_axi_man_AWVALID,
        AWREADY => s_axi_man_AWREADY,
        AWADDR => s_axi_man_AWADDR,
        WVALID => s_axi_man_WVALID,
        WREADY => s_axi_man_WREADY,
        WDATA => s_axi_man_WDATA,
        WSTRB => s_axi_man_WSTRB,
        ARVALID => s_axi_man_ARVALID,
        ARREADY => s_axi_man_ARREADY,
        ARADDR => s_axi_man_ARADDR,
        RVALID => s_axi_man_RVALID,
        RREADY => s_axi_man_RREADY,
        RDATA => s_axi_man_RDATA,
        RRESP => s_axi_man_RRESP,
        BVALID => s_axi_man_BVALID,
        BREADY => s_axi_man_BREADY,
        BRESP => s_axi_man_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        homing => homing,
        f => x_assign_reg_958,
        f_ap_vld => f_ap_vld,
        k => k,
        monitor => monitor);

    manage_sitofp_32nbkb_U1 : component manage_sitofp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_reg_949,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p1);

    manage_sdiv_25ns_cud_U2 : component manage_sdiv_25ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_403_ap_start,
        done => grp_fu_403_ap_done,
        din0 => grp_fu_403_p0,
        din1 => grp_fu_403_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);

    manage_sdiv_25ns_cud_U3 : component manage_sdiv_25ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_886_ap_start,
        done => grp_fu_886_ap_done,
        din0 => grp_fu_886_p0,
        din1 => tmp_18_pn_reg_193,
        ce => ap_const_logic_1,
        dout => grp_fu_886_p2);

    manage_sdiv_25ns_cud_U4 : component manage_sdiv_25ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_921_ap_start,
        done => grp_fu_921_ap_done,
        din0 => grp_fu_921_p0,
        din1 => tmp_13_pn_reg_203,
        ce => ap_const_logic_1,
        dout => grp_fu_921_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    back_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                back_preg <= ap_const_logic_0;
            else
                if ((((tmp_3_reg_1023 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1)))) then 
                    back_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((tmp_7_reg_1052 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((tmp_8_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0)))) then 
                    back_preg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    enable_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enable_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    enable_preg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    enable_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    forward_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                forward_preg <= ap_const_logic_0;
            else
                if ((((tmp_3_reg_1023 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1)))) then 
                    forward_preg <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((tmp_7_reg_1052 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((tmp_8_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0)))) then 
                    forward_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    freq_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                freq_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                    freq_preg <= grp_fu_921_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    freq_preg <= grp_fu_886_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    freq_preg <= tmp_s_reg_1015;
                end if; 
            end if;
        end if;
    end process;


    h_count_1_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                h_count_1_reg_183 <= h_count_1_be_reg_1103;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1) and (monitor_read_reg_936 = ap_const_lv1_1))) then 
                h_count_1_reg_183 <= h_count_fu_98;
            end if; 
        end if;
    end process;

    h_count_4_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                h_count_4_reg_173 <= h_count_3_reg_1088;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0) and (monitor_read_reg_936 = ap_const_lv1_1))) then 
                h_count_4_reg_173 <= h_count_fu_98;
            end if; 
        end if;
    end process;

    h_count_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_640_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1))) then 
                                h_count_fu_98(30 downto 0) <= h_count_2_cast_reg_1000(30 downto 0);
            elsif (((tmp_8_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0))) then 
                                h_count_fu_98(30 downto 0) <= smax_cast_reg_995(30 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_count_fu_98(0) <= '0';
                h_count_fu_98(1) <= '0';
                h_count_fu_98(2) <= '0';
                h_count_fu_98(3) <= '0';
                h_count_fu_98(4) <= '0';
                h_count_fu_98(5) <= '0';
                h_count_fu_98(6) <= '0';
                h_count_fu_98(7) <= '0';
                h_count_fu_98(8) <= '0';
                h_count_fu_98(9) <= '0';
                h_count_fu_98(10) <= '0';
                h_count_fu_98(11) <= '0';
                h_count_fu_98(12) <= '0';
                h_count_fu_98(13) <= '0';
                h_count_fu_98(14) <= '0';
                h_count_fu_98(15) <= '0';
                h_count_fu_98(16) <= '0';
                h_count_fu_98(17) <= '0';
                h_count_fu_98(18) <= '0';
                h_count_fu_98(19) <= '0';
                h_count_fu_98(20) <= '0';
                h_count_fu_98(21) <= '0';
                h_count_fu_98(22) <= '0';
                h_count_fu_98(23) <= '0';
                h_count_fu_98(24) <= '0';
                h_count_fu_98(25) <= '0';
                h_count_fu_98(26) <= '0';
                h_count_fu_98(27) <= '0';
                h_count_fu_98(28) <= '0';
                h_count_fu_98(29) <= '0';
                h_count_fu_98(30) <= '0';
            end if; 
        end if;
    end process;

    tmp_13_pn_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                if ((tmp_7_reg_1052 = ap_const_lv1_1)) then 
                    tmp_13_pn_reg_203 <= p_Val2_4_fu_909_p3;
                elsif ((tmp_7_reg_1052 = ap_const_lv1_0)) then 
                    tmp_13_pn_reg_203 <= p_Val2_8_fu_898_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp_18_pn_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                if ((tmp_3_reg_1023 = ap_const_lv1_1)) then 
                    tmp_18_pn_reg_193 <= p_Val2_14_fu_874_p3;
                elsif ((tmp_3_reg_1023 = ap_const_lv1_0)) then 
                    tmp_18_pn_reg_193 <= p_Val2_18_fu_863_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                h_count_1_be_reg_1103 <= h_count_1_be_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1) and (monitor_read_reg_936 = ap_const_lv1_1))) then
                    h_count_2_cast_reg_1000(30 downto 0) <= h_count_2_cast_fu_331_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                h_count_3_reg_1088 <= h_count_3_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_4_reg_963 = ap_const_lv1_0) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0) and (tmp_5_reg_945 = ap_const_lv1_1) and (monitor_read_reg_936 = ap_const_lv1_1))) then
                isNeg_2_reg_984 <= sh_assign_4_fu_277_p2(8 downto 8);
                sh_assign_5_reg_989 <= sh_assign_5_fu_295_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                k_read_reg_940 <= k;
                monitor_read_reg_936 <= (0=>monitor, others=>'-');
                tmp_5_reg_945 <= tmp_5_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_646_p2 = ap_const_lv1_0) and (tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1))) then
                p_Result_1_reg_1056 <= p_Val2_s_reg_967(31 downto 31);
                p_Val2_6_reg_1061 <= p_Val2_6_fu_745_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_422_p2 = ap_const_lv1_1) and (tmp_3_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0))) then
                p_Result_2_reg_1038 <= p_Val2_s_reg_967(31 downto 31);
                p_Val2_12_reg_1043 <= p_Val2_12_fu_628_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_428_p2 = ap_const_lv1_0) and (tmp_8_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0))) then
                p_Result_3_reg_1027 <= p_Val2_s_reg_967(31 downto 31);
                p_Val2_16_reg_1032 <= p_Val2_16_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Result_4_reg_1005 <= p_Val2_s_reg_967(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_640_p2 = ap_const_lv1_1) and (tmp_7_fu_646_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1))) then
                p_Result_s_reg_1067 <= p_Val2_s_reg_967(31 downto 31);
                p_Val2_2_reg_1072 <= p_Val2_2_fu_846_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_s_reg_967 <= p_Val2_s_fu_265_p1;
                tmp_4_reg_963 <= tmp_4_fu_259_p2;
                x_assign_reg_958 <= grp_fu_213_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0) and (monitor_read_reg_936 = ap_const_lv1_1))) then
                    smax_cast_reg_995(30 downto 0) <= smax_cast_fu_315_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_2_reg_949(31 downto 2) <= tmp_2_fu_254_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0))) then
                tmp_3_reg_1023 <= tmp_3_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1))) then
                tmp_7_reg_1052 <= tmp_7_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_s_reg_1015 <= tmp_s_fu_415_p3;
            end if;
        end if;
    end process;
    tmp_2_reg_949(1 downto 0) <= "00";
    smax_cast_reg_995(31) <= '0';
    h_count_2_cast_reg_1000(31) <= '0';
    h_count_fu_98(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, monitor_read_reg_936, tmp_5_reg_945, sensor_read_read_fu_126_p2, tmp_4_reg_963, ap_CS_fsm_state9, ap_CS_fsm_state40, tmp_8_fu_422_p2, tmp_6_fu_640_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (monitor_read_reg_936 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (((tmp_5_reg_945 = ap_const_lv1_0) and (monitor_read_reg_936 = ap_const_lv1_1)) or ((sensor_read_read_fu_126_p2 = ap_const_lv1_1) and (monitor_read_reg_936 = ap_const_lv1_1)) or ((tmp_4_reg_963 = ap_const_lv1_1) and (monitor_read_reg_936 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (((tmp_6_fu_640_p2 = ap_const_lv1_0) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1)) or ((tmp_8_fu_422_p2 = ap_const_lv1_0) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0)) or ((tmp_4_reg_963 = ap_const_lv1_0) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0) and (tmp_5_reg_945 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(monitor_read_reg_936, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (monitor_read_reg_936 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(monitor_read_reg_936, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (monitor_read_reg_936 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    back_assign_proc : process(sensor_read_read_fu_126_p2, tmp_4_reg_963, ap_CS_fsm_state38, tmp_3_reg_1023, ap_CS_fsm_state40, tmp_8_fu_422_p2, tmp_7_reg_1052, tmp_6_fu_640_p2, ap_CS_fsm_state41, ap_CS_fsm_state71, back_preg)
    begin
        if ((((tmp_3_reg_1023 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1)))) then 
            back <= ap_const_logic_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((tmp_7_reg_1052 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((tmp_8_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0)))) then 
            back <= ap_const_logic_1;
        else 
            back <= back_preg;
        end if; 
    end process;


    enable_assign_proc : process(monitor_read_reg_936, sensor_read_read_fu_126_p2, ap_CS_fsm_state8, tmp_4_reg_963, ap_CS_fsm_state9, ap_CS_fsm_state38, enable_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1) and (monitor_read_reg_936 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0) and (monitor_read_reg_936 = ap_const_lv1_1)))) then 
            enable <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            enable <= ap_const_logic_0;
        else 
            enable <= enable_preg;
        end if; 
    end process;


    f_ap_vld_assign_proc : process(tmp_3_reg_1023, tmp_7_reg_1052, ap_CS_fsm_state41, ap_CS_fsm_state71, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((tmp_7_reg_1052 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((tmp_7_reg_1052 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((tmp_3_reg_1023 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((tmp_3_reg_1023 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            f_ap_vld <= ap_const_logic_1;
        else 
            f_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    forward_assign_proc : process(sensor_read_read_fu_126_p2, tmp_4_reg_963, ap_CS_fsm_state38, tmp_3_reg_1023, ap_CS_fsm_state40, tmp_8_fu_422_p2, tmp_7_reg_1052, tmp_6_fu_640_p2, ap_CS_fsm_state41, ap_CS_fsm_state71, forward_preg)
    begin
        if ((((tmp_3_reg_1023 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((tmp_6_fu_640_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (sensor_read_read_fu_126_p2 = ap_const_lv1_1)))) then 
            forward <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((tmp_7_reg_1052 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((tmp_8_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_4_reg_963 = ap_const_lv1_1) and (sensor_read_read_fu_126_p2 = ap_const_lv1_0)))) then 
            forward <= ap_const_logic_0;
        else 
            forward <= forward_preg;
        end if; 
    end process;


    freq_assign_proc : process(tmp_s_reg_1015, ap_CS_fsm_state70, ap_CS_fsm_state100, ap_CS_fsm_state39, freq_preg, grp_fu_886_p2, grp_fu_921_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            freq <= grp_fu_921_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            freq <= grp_fu_886_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            freq <= tmp_s_reg_1015;
        else 
            freq <= freq_preg;
        end if; 
    end process;

    grp_fu_216_p4 <= p_Val2_s_reg_967(30 downto 23);
    grp_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(grp_fu_216_p4));
    grp_fu_231_p2 <= "1" when (unsigned(h_count_fu_98) > unsigned(ap_const_lv32_35D)) else "0";

    grp_fu_403_ap_start_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_403_ap_start <= ap_const_logic_1;
        else 
            grp_fu_403_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_403_p0 <= ap_const_lv32_5F5E10(25 - 1 downto 0);
    grp_fu_403_p1 <= 
        tmp_10_fu_382_p1 when (isNeg_2_reg_984(0) = '1') else 
        tmp_11_fu_386_p4;

    grp_fu_886_ap_start_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_886_ap_start <= ap_const_logic_1;
        else 
            grp_fu_886_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_886_p0 <= ap_const_lv32_5F5E10(25 - 1 downto 0);

    grp_fu_921_ap_start_assign_proc : process(ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_921_ap_start <= ap_const_logic_1;
        else 
            grp_fu_921_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_921_p0 <= ap_const_lv32_5F5E10(25 - 1 downto 0);
    h_count_1_be_fu_915_p2 <= std_logic_vector(unsigned(h_count_1_reg_183) + unsigned(ap_const_lv32_1));
    h_count_2_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_count_2_fu_323_p3),32));
    h_count_2_fu_323_p3 <= 
        tmp_9_fu_319_p1 when (grp_fu_231_p2(0) = '1') else 
        ap_const_lv31_35D;
    h_count_3_fu_880_p2 <= std_logic_vector(unsigned(h_count_4_reg_173) + unsigned(ap_const_lv32_1));
    isNeg_1_fu_679_p3 <= sh_assign_2_fu_673_p2(8 downto 8);
    isNeg_2_fu_283_p3 <= sh_assign_4_fu_277_p2(8 downto 8);
    isNeg_3_fu_562_p3 <= sh_assign_6_fu_556_p2(8 downto 8);
    isNeg_4_fu_461_p3 <= sh_assign_8_fu_455_p2(8 downto 8);
    isNeg_fu_780_p3 <= sh_assign_fu_774_p2(8 downto 8);
    loc_V_1_fu_753_p1 <= p_Val2_s_reg_967(23 - 1 downto 0);
    loc_V_3_fu_652_p1 <= p_Val2_s_reg_967(23 - 1 downto 0);
    loc_V_5_fu_535_p1 <= p_Val2_s_reg_967(23 - 1 downto 0);
    loc_V_7_fu_434_p1 <= p_Val2_s_reg_967(23 - 1 downto 0);
    loc_V_9_fu_335_p1 <= p_Val2_s_reg_967(23 - 1 downto 0);
    p_Val2_12_fu_628_p3 <= 
        tmp_21_fu_614_p1 when (isNeg_3_fu_562_p3(0) = '1') else 
        tmp_22_fu_618_p4;
    p_Val2_14_fu_874_p3 <= 
        p_Val2_6_i_i_i3_fu_869_p2 when (p_Result_2_reg_1038(0) = '1') else 
        p_Val2_12_reg_1043;
    p_Val2_16_fu_527_p3 <= 
        tmp_23_fu_513_p1 when (isNeg_4_fu_461_p3(0) = '1') else 
        tmp_24_fu_517_p4;
    p_Val2_18_fu_863_p3 <= 
        p_Val2_6_i_i_i4_fu_858_p2 when (p_Result_3_reg_1027(0) = '1') else 
        p_Val2_16_reg_1032;
    p_Val2_2_fu_846_p3 <= 
        tmp_14_fu_832_p1 when (isNeg_fu_780_p3(0) = '1') else 
        tmp_15_fu_836_p4;
    p_Val2_4_fu_909_p3 <= 
        p_Val2_6_i_i_i_fu_904_p2 when (p_Result_s_reg_1067(0) = '1') else 
        p_Val2_2_reg_1072;
    p_Val2_6_fu_745_p3 <= 
        tmp_18_fu_731_p1 when (isNeg_1_fu_679_p3(0) = '1') else 
        tmp_19_fu_735_p4;
    p_Val2_6_i_i_i2_fu_893_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_6_reg_1061));
    p_Val2_6_i_i_i3_fu_869_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_12_reg_1043));
    p_Val2_6_i_i_i4_fu_858_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_16_reg_1032));
    p_Val2_6_i_i_i_fu_904_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_reg_1072));
    p_Val2_8_fu_898_p3 <= 
        p_Val2_6_i_i_i2_fu_893_p2 when (p_Result_1_reg_1056(0) = '1') else 
        p_Val2_6_reg_1061;
    p_Val2_s_fu_265_p1 <= grp_fu_213_p1;
    p_neg_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(grp_fu_403_p2));
    sensor_read_read_fu_126_p2 <= (0=>sensor, others=>'-');
        sh_assign_1_cast_cas_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_792_p3),25));

        sh_assign_1_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_792_p3),32));

    sh_assign_1_fu_792_p3 <= 
        tmp_16_i_i_i_cast_fu_788_p1 when (isNeg_fu_780_p3(0) = '1') else 
        sh_assign_fu_774_p2;
    sh_assign_2_fu_673_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i2_cast7_fu_669_p1));
        sh_assign_3_cast_cas_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_691_p3),25));

        sh_assign_3_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_691_p3),32));

    sh_assign_3_fu_691_p3 <= 
        tmp_16_i_i_i2_cast_fu_687_p1 when (isNeg_1_fu_679_p3(0) = '1') else 
        sh_assign_2_fu_673_p2;
    sh_assign_4_fu_277_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast1_fu_273_p1));
        sh_assign_5_cast_cas_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_reg_989),25));

        sh_assign_5_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_reg_989),32));

    sh_assign_5_fu_295_p3 <= 
        tmp_16_i_i_i1_cast_fu_291_p1 when (isNeg_2_fu_283_p3(0) = '1') else 
        sh_assign_4_fu_277_p2;
    sh_assign_6_fu_556_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i3_cast5_fu_552_p1));
        sh_assign_7_cast_cas_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_574_p3),25));

        sh_assign_7_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_7_fu_574_p3),32));

    sh_assign_7_fu_574_p3 <= 
        tmp_16_i_i_i3_cast_fu_570_p1 when (isNeg_3_fu_562_p3(0) = '1') else 
        sh_assign_6_fu_556_p2;
    sh_assign_8_fu_455_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i4_cast3_fu_451_p1));
        sh_assign_9_cast_cas_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_473_p3),25));

        sh_assign_9_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_9_fu_473_p3),32));

    sh_assign_9_fu_473_p3 <= 
        tmp_16_i_i_i4_cast_fu_469_p1 when (isNeg_4_fu_461_p3(0) = '1') else 
        sh_assign_8_fu_455_p2;
    sh_assign_fu_774_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast9_fu_770_p1));
    smax_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_307_p3),32));
    smax_fu_307_p3 <= 
        tmp_12_fu_303_p1 when (grp_fu_231_p2(0) = '1') else 
        ap_const_lv31_35D;
    tmp_10_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_374_p3),32));
    tmp_11_fu_386_p4 <= tmp_19_i_i_i1_fu_368_p2(55 downto 24);
    tmp_12_fu_303_p1 <= h_count_fu_98(31 - 1 downto 0);
    tmp_14_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_824_p3),32));
    tmp_15_fu_836_p4 <= tmp_19_i_i_i_fu_818_p2(55 downto 24);
    tmp_15_i_i_i1_cast2_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i_i_i1_fu_338_p4),79));
    tmp_15_i_i_i1_fu_338_p4 <= ((ap_const_lv1_1 & loc_V_9_fu_335_p1) & ap_const_lv1_0);
    tmp_15_i_i_i2_cast8_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i_i_i2_fu_655_p4),79));
    tmp_15_i_i_i2_fu_655_p4 <= ((ap_const_lv1_1 & loc_V_3_fu_652_p1) & ap_const_lv1_0);
    tmp_15_i_i_i3_cast6_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i_i_i3_fu_538_p4),79));
    tmp_15_i_i_i3_fu_538_p4 <= ((ap_const_lv1_1 & loc_V_5_fu_535_p1) & ap_const_lv1_0);
    tmp_15_i_i_i4_cast4_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i_i_i4_fu_437_p4),79));
    tmp_15_i_i_i4_fu_437_p4 <= ((ap_const_lv1_1 & loc_V_7_fu_434_p1) & ap_const_lv1_0);
    tmp_15_i_i_i_cast1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i_i_i_fu_756_p4),79));
    tmp_15_i_i_i_fu_756_p4 <= ((ap_const_lv1_1 & loc_V_1_fu_753_p1) & ap_const_lv1_0);
        tmp_16_i_i_i1_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_225_p2),9));

        tmp_16_i_i_i2_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_225_p2),9));

        tmp_16_i_i_i3_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_225_p2),9));

        tmp_16_i_i_i4_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_225_p2),9));

        tmp_16_i_i_i_cast_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_225_p2),9));

    tmp_17_i_i_i1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_352_p1),79));
    tmp_17_i_i_i2_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_699_p1),79));
    tmp_17_i_i_i3_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_7_cast_fu_582_p1),79));
    tmp_17_i_i_i4_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_9_cast_fu_481_p1),79));
    tmp_17_i_i_i_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_800_p1),79));
    tmp_18_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_723_p3),32));
    tmp_18_i_i_i1_fu_362_p2 <= std_logic_vector(shift_right(unsigned(tmp_15_i_i_i1_fu_338_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_355_p1(25-1 downto 0)))));
    tmp_18_i_i_i2_fu_711_p2 <= std_logic_vector(shift_right(unsigned(tmp_15_i_i_i2_fu_655_p4),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_703_p1(25-1 downto 0)))));
    tmp_18_i_i_i3_fu_594_p2 <= std_logic_vector(shift_right(unsigned(tmp_15_i_i_i3_fu_538_p4),to_integer(unsigned('0' & sh_assign_7_cast_cas_fu_586_p1(25-1 downto 0)))));
    tmp_18_i_i_i4_fu_493_p2 <= std_logic_vector(shift_right(unsigned(tmp_15_i_i_i4_fu_437_p4),to_integer(unsigned('0' & sh_assign_9_cast_cas_fu_485_p1(25-1 downto 0)))));
    tmp_18_i_i_i_fu_812_p2 <= std_logic_vector(shift_right(unsigned(tmp_15_i_i_i_fu_756_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_804_p1(25-1 downto 0)))));
    tmp_19_fu_735_p4 <= tmp_19_i_i_i2_fu_717_p2(55 downto 24);
    tmp_19_i_i_i1_fu_368_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_i_i_i1_cast2_fu_348_p1),to_integer(unsigned('0' & tmp_17_i_i_i1_fu_358_p1(31-1 downto 0)))));
    tmp_19_i_i_i2_fu_717_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_i_i_i2_cast8_fu_665_p1),to_integer(unsigned('0' & tmp_17_i_i_i2_fu_707_p1(31-1 downto 0)))));
    tmp_19_i_i_i3_fu_600_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_i_i_i3_cast6_fu_548_p1),to_integer(unsigned('0' & tmp_17_i_i_i3_fu_590_p1(31-1 downto 0)))));
    tmp_19_i_i_i4_fu_499_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_i_i_i4_cast4_fu_447_p1),to_integer(unsigned('0' & tmp_17_i_i_i4_fu_489_p1(31-1 downto 0)))));
    tmp_19_i_i_i_fu_818_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_i_i_i_cast1_fu_766_p1),to_integer(unsigned('0' & tmp_17_i_i_i_fu_808_p1(31-1 downto 0)))));
    tmp_20_fu_374_p3 <= tmp_18_i_i_i1_fu_362_p2(24 downto 24);
    tmp_21_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_606_p3),32));
    tmp_22_fu_618_p4 <= tmp_19_i_i_i3_fu_600_p2(55 downto 24);
    tmp_23_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_505_p3),32));
    tmp_24_fu_517_p4 <= tmp_19_i_i_i4_fu_499_p2(55 downto 24);
    tmp_28_fu_824_p3 <= tmp_18_i_i_i_fu_812_p2(24 downto 24);
    tmp_2_fu_254_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(k_read_reg_940) * signed('0' &ap_const_lv32_64))), 32));
    tmp_32_fu_723_p3 <= tmp_18_i_i_i2_fu_711_p2(24 downto 24);
    tmp_36_fu_606_p3 <= tmp_18_i_i_i3_fu_594_p2(24 downto 24);
    tmp_3_fu_428_p2 <= "1" when (signed(h_count_4_reg_173) < signed(ap_const_lv32_23B)) else "0";
    tmp_40_fu_505_p3 <= tmp_18_i_i_i4_fu_493_p2(24 downto 24);
    tmp_4_fu_259_p2 <= "1" when (current_count = ap_const_lv32_FCE) else "0";
    tmp_5_fu_243_p2 <= "1" when (homing = ap_const_lv32_1) else "0";
    tmp_6_fu_640_p2 <= "1" when (signed(h_count_1_reg_183) < signed(ap_const_lv32_35D)) else "0";
    tmp_7_fu_646_p2 <= "1" when (signed(h_count_1_reg_183) < signed(ap_const_lv32_23B)) else "0";
    tmp_8_fu_422_p2 <= "1" when (signed(h_count_4_reg_173) < signed(ap_const_lv32_35D)) else "0";
    tmp_9_fu_319_p1 <= h_count_fu_98(31 - 1 downto 0);
    tmp_i_i_i_i1_cast1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_216_p4),9));
    tmp_i_i_i_i2_cast7_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_216_p4),9));
    tmp_i_i_i_i3_cast5_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_216_p4),9));
    tmp_i_i_i_i4_cast3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_216_p4),9));
    tmp_i_i_i_i_cast9_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_216_p4),9));
    tmp_s_fu_415_p3 <= 
        p_neg_fu_409_p2 when (p_Result_4_reg_1005(0) = '1') else 
        grp_fu_403_p2;
end behav;
