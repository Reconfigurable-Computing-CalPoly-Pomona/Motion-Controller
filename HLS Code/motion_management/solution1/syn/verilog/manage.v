// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="manage,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.555000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=2405,HLS_SYN_LUT=4595,HLS_VERSION=2018_2}" *)

module manage (
        ap_clk,
        ap_rst_n,
        sensor,
        forward,
        back,
        current_count,
        freq,
        enable,
        s_axi_man_AWVALID,
        s_axi_man_AWREADY,
        s_axi_man_AWADDR,
        s_axi_man_WVALID,
        s_axi_man_WREADY,
        s_axi_man_WDATA,
        s_axi_man_WSTRB,
        s_axi_man_ARVALID,
        s_axi_man_ARREADY,
        s_axi_man_ARADDR,
        s_axi_man_RVALID,
        s_axi_man_RREADY,
        s_axi_man_RDATA,
        s_axi_man_RRESP,
        s_axi_man_BVALID,
        s_axi_man_BREADY,
        s_axi_man_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 100'd1;
parameter    ap_ST_fsm_state2 = 100'd2;
parameter    ap_ST_fsm_state3 = 100'd4;
parameter    ap_ST_fsm_state4 = 100'd8;
parameter    ap_ST_fsm_state5 = 100'd16;
parameter    ap_ST_fsm_state6 = 100'd32;
parameter    ap_ST_fsm_state7 = 100'd64;
parameter    ap_ST_fsm_state8 = 100'd128;
parameter    ap_ST_fsm_state9 = 100'd256;
parameter    ap_ST_fsm_state10 = 100'd512;
parameter    ap_ST_fsm_state11 = 100'd1024;
parameter    ap_ST_fsm_state12 = 100'd2048;
parameter    ap_ST_fsm_state13 = 100'd4096;
parameter    ap_ST_fsm_state14 = 100'd8192;
parameter    ap_ST_fsm_state15 = 100'd16384;
parameter    ap_ST_fsm_state16 = 100'd32768;
parameter    ap_ST_fsm_state17 = 100'd65536;
parameter    ap_ST_fsm_state18 = 100'd131072;
parameter    ap_ST_fsm_state19 = 100'd262144;
parameter    ap_ST_fsm_state20 = 100'd524288;
parameter    ap_ST_fsm_state21 = 100'd1048576;
parameter    ap_ST_fsm_state22 = 100'd2097152;
parameter    ap_ST_fsm_state23 = 100'd4194304;
parameter    ap_ST_fsm_state24 = 100'd8388608;
parameter    ap_ST_fsm_state25 = 100'd16777216;
parameter    ap_ST_fsm_state26 = 100'd33554432;
parameter    ap_ST_fsm_state27 = 100'd67108864;
parameter    ap_ST_fsm_state28 = 100'd134217728;
parameter    ap_ST_fsm_state29 = 100'd268435456;
parameter    ap_ST_fsm_state30 = 100'd536870912;
parameter    ap_ST_fsm_state31 = 100'd1073741824;
parameter    ap_ST_fsm_state32 = 100'd2147483648;
parameter    ap_ST_fsm_state33 = 100'd4294967296;
parameter    ap_ST_fsm_state34 = 100'd8589934592;
parameter    ap_ST_fsm_state35 = 100'd17179869184;
parameter    ap_ST_fsm_state36 = 100'd34359738368;
parameter    ap_ST_fsm_state37 = 100'd68719476736;
parameter    ap_ST_fsm_state38 = 100'd137438953472;
parameter    ap_ST_fsm_state39 = 100'd274877906944;
parameter    ap_ST_fsm_state40 = 100'd549755813888;
parameter    ap_ST_fsm_state41 = 100'd1099511627776;
parameter    ap_ST_fsm_state42 = 100'd2199023255552;
parameter    ap_ST_fsm_state43 = 100'd4398046511104;
parameter    ap_ST_fsm_state44 = 100'd8796093022208;
parameter    ap_ST_fsm_state45 = 100'd17592186044416;
parameter    ap_ST_fsm_state46 = 100'd35184372088832;
parameter    ap_ST_fsm_state47 = 100'd70368744177664;
parameter    ap_ST_fsm_state48 = 100'd140737488355328;
parameter    ap_ST_fsm_state49 = 100'd281474976710656;
parameter    ap_ST_fsm_state50 = 100'd562949953421312;
parameter    ap_ST_fsm_state51 = 100'd1125899906842624;
parameter    ap_ST_fsm_state52 = 100'd2251799813685248;
parameter    ap_ST_fsm_state53 = 100'd4503599627370496;
parameter    ap_ST_fsm_state54 = 100'd9007199254740992;
parameter    ap_ST_fsm_state55 = 100'd18014398509481984;
parameter    ap_ST_fsm_state56 = 100'd36028797018963968;
parameter    ap_ST_fsm_state57 = 100'd72057594037927936;
parameter    ap_ST_fsm_state58 = 100'd144115188075855872;
parameter    ap_ST_fsm_state59 = 100'd288230376151711744;
parameter    ap_ST_fsm_state60 = 100'd576460752303423488;
parameter    ap_ST_fsm_state61 = 100'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 100'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 100'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 100'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 100'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 100'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 100'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 100'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 100'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 100'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 100'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 100'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 100'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 100'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 100'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 100'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 100'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 100'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 100'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 100'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 100'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 100'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 100'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 100'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 100'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 100'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 100'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 100'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 100'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 100'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 100'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 100'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 100'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 100'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 100'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 100'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 100'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 100'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 100'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 100'd633825300114114700748351602688;
parameter    C_S_AXI_MAN_DATA_WIDTH = 32;
parameter    C_S_AXI_MAN_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_MAN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   sensor;
output   forward;
output   back;
input  [31:0] current_count;
output  [31:0] freq;
output   enable;
input   s_axi_man_AWVALID;
output   s_axi_man_AWREADY;
input  [C_S_AXI_MAN_ADDR_WIDTH - 1:0] s_axi_man_AWADDR;
input   s_axi_man_WVALID;
output   s_axi_man_WREADY;
input  [C_S_AXI_MAN_DATA_WIDTH - 1:0] s_axi_man_WDATA;
input  [C_S_AXI_MAN_WSTRB_WIDTH - 1:0] s_axi_man_WSTRB;
input   s_axi_man_ARVALID;
output   s_axi_man_ARREADY;
input  [C_S_AXI_MAN_ADDR_WIDTH - 1:0] s_axi_man_ARADDR;
output   s_axi_man_RVALID;
input   s_axi_man_RREADY;
output  [C_S_AXI_MAN_DATA_WIDTH - 1:0] s_axi_man_RDATA;
output  [1:0] s_axi_man_RRESP;
output   s_axi_man_BVALID;
input   s_axi_man_BREADY;
output  [1:0] s_axi_man_BRESP;
output   interrupt;

reg forward;
reg back;
reg[31:0] freq;
reg enable;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [99:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] homing;
reg    f_ap_vld;
wire   [31:0] k;
wire    monitor;
reg   [0:0] monitor_read_reg_936;
reg  signed [31:0] k_read_reg_940;
wire   [0:0] tmp_5_fu_243_p2;
reg   [0:0] tmp_5_reg_945;
wire   [31:0] tmp_2_fu_254_p2;
reg   [31:0] tmp_2_reg_949;
wire    ap_CS_fsm_state2;
wire   [0:0] sensor_read_read_fu_126_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_213_p1;
reg   [31:0] x_assign_reg_958;
wire   [0:0] tmp_4_fu_259_p2;
reg   [0:0] tmp_4_reg_963;
wire   [31:0] p_Val2_s_fu_265_p1;
reg   [31:0] p_Val2_s_reg_967;
wire    ap_CS_fsm_state9;
wire   [0:0] isNeg_2_fu_283_p3;
reg   [0:0] isNeg_2_reg_984;
wire  signed [8:0] sh_assign_5_fu_295_p3;
reg  signed [8:0] sh_assign_5_reg_989;
wire   [31:0] smax_cast_fu_315_p1;
reg   [31:0] smax_cast_reg_995;
wire   [31:0] h_count_2_cast_fu_331_p1;
reg   [31:0] h_count_2_cast_reg_1000;
reg   [0:0] p_Result_4_reg_1005;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_s_fu_415_p3;
reg   [31:0] tmp_s_reg_1015;
wire    ap_CS_fsm_state38;
wire   [0:0] tmp_3_fu_428_p2;
reg   [0:0] tmp_3_reg_1023;
wire    ap_CS_fsm_state40;
wire   [0:0] tmp_8_fu_422_p2;
reg   [0:0] p_Result_3_reg_1027;
wire   [31:0] p_Val2_16_fu_527_p3;
reg   [31:0] p_Val2_16_reg_1032;
reg   [0:0] p_Result_2_reg_1038;
wire   [31:0] p_Val2_12_fu_628_p3;
reg   [31:0] p_Val2_12_reg_1043;
wire   [0:0] tmp_7_fu_646_p2;
reg   [0:0] tmp_7_reg_1052;
wire   [0:0] tmp_6_fu_640_p2;
reg   [0:0] p_Result_1_reg_1056;
wire   [31:0] p_Val2_6_fu_745_p3;
reg   [31:0] p_Val2_6_reg_1061;
reg   [0:0] p_Result_s_reg_1067;
wire   [31:0] p_Val2_2_fu_846_p3;
reg   [31:0] p_Val2_2_reg_1072;
wire   [31:0] p_Val2_18_fu_863_p3;
wire    ap_CS_fsm_state41;
wire   [31:0] p_Val2_14_fu_874_p3;
wire   [31:0] h_count_3_fu_880_p2;
reg   [31:0] h_count_3_reg_1088;
wire   [31:0] p_Val2_8_fu_898_p3;
wire    ap_CS_fsm_state71;
wire   [31:0] p_Val2_4_fu_909_p3;
wire   [31:0] h_count_1_be_fu_915_p2;
reg   [31:0] h_count_1_be_reg_1103;
reg   [31:0] h_count_4_reg_173;
wire    ap_CS_fsm_state70;
reg   [31:0] h_count_1_reg_183;
wire    ap_CS_fsm_state100;
reg   [31:0] tmp_18_pn_reg_193;
reg   [31:0] tmp_13_pn_reg_203;
reg   [31:0] h_count_fu_98;
reg    enable_preg;
reg    back_preg;
reg    forward_preg;
wire    ap_CS_fsm_state39;
reg   [31:0] freq_preg;
wire   [31:0] grp_fu_886_p2;
wire   [31:0] grp_fu_921_p2;
wire    ap_CS_fsm_state3;
wire   [7:0] grp_fu_216_p4;
wire   [8:0] tmp_i_i_i_i1_cast1_fu_273_p1;
wire   [8:0] sh_assign_4_fu_277_p2;
wire   [7:0] grp_fu_225_p2;
wire  signed [8:0] tmp_16_i_i_i1_cast_fu_291_p1;
wire   [0:0] grp_fu_231_p2;
wire   [30:0] tmp_12_fu_303_p1;
wire   [30:0] smax_fu_307_p3;
wire   [30:0] tmp_9_fu_319_p1;
wire   [30:0] h_count_2_fu_323_p3;
wire   [22:0] loc_V_9_fu_335_p1;
wire   [24:0] tmp_15_i_i_i1_fu_338_p4;
wire  signed [31:0] sh_assign_5_cast_fu_352_p1;
wire  signed [24:0] sh_assign_5_cast_cas_fu_355_p1;
wire   [78:0] tmp_15_i_i_i1_cast2_fu_348_p1;
wire   [78:0] tmp_17_i_i_i1_fu_358_p1;
wire   [24:0] tmp_18_i_i_i1_fu_362_p2;
wire   [0:0] tmp_20_fu_374_p3;
wire   [78:0] tmp_19_i_i_i1_fu_368_p2;
wire   [31:0] tmp_10_fu_382_p1;
wire   [31:0] tmp_11_fu_386_p4;
wire   [24:0] grp_fu_403_p0;
wire   [31:0] grp_fu_403_p1;
wire   [31:0] grp_fu_403_p2;
wire   [31:0] p_neg_fu_409_p2;
wire   [22:0] loc_V_7_fu_434_p1;
wire   [24:0] tmp_15_i_i_i4_fu_437_p4;
wire   [8:0] tmp_i_i_i_i4_cast3_fu_451_p1;
wire   [8:0] sh_assign_8_fu_455_p2;
wire   [0:0] isNeg_4_fu_461_p3;
wire  signed [8:0] tmp_16_i_i_i4_cast_fu_469_p1;
wire  signed [8:0] sh_assign_9_fu_473_p3;
wire  signed [31:0] sh_assign_9_cast_fu_481_p1;
wire  signed [24:0] sh_assign_9_cast_cas_fu_485_p1;
wire   [78:0] tmp_15_i_i_i4_cast4_fu_447_p1;
wire   [78:0] tmp_17_i_i_i4_fu_489_p1;
wire   [24:0] tmp_18_i_i_i4_fu_493_p2;
wire   [0:0] tmp_40_fu_505_p3;
wire   [78:0] tmp_19_i_i_i4_fu_499_p2;
wire   [31:0] tmp_23_fu_513_p1;
wire   [31:0] tmp_24_fu_517_p4;
wire   [22:0] loc_V_5_fu_535_p1;
wire   [24:0] tmp_15_i_i_i3_fu_538_p4;
wire   [8:0] tmp_i_i_i_i3_cast5_fu_552_p1;
wire   [8:0] sh_assign_6_fu_556_p2;
wire   [0:0] isNeg_3_fu_562_p3;
wire  signed [8:0] tmp_16_i_i_i3_cast_fu_570_p1;
wire  signed [8:0] sh_assign_7_fu_574_p3;
wire  signed [31:0] sh_assign_7_cast_fu_582_p1;
wire  signed [24:0] sh_assign_7_cast_cas_fu_586_p1;
wire   [78:0] tmp_15_i_i_i3_cast6_fu_548_p1;
wire   [78:0] tmp_17_i_i_i3_fu_590_p1;
wire   [24:0] tmp_18_i_i_i3_fu_594_p2;
wire   [0:0] tmp_36_fu_606_p3;
wire   [78:0] tmp_19_i_i_i3_fu_600_p2;
wire   [31:0] tmp_21_fu_614_p1;
wire   [31:0] tmp_22_fu_618_p4;
wire   [22:0] loc_V_3_fu_652_p1;
wire   [24:0] tmp_15_i_i_i2_fu_655_p4;
wire   [8:0] tmp_i_i_i_i2_cast7_fu_669_p1;
wire   [8:0] sh_assign_2_fu_673_p2;
wire   [0:0] isNeg_1_fu_679_p3;
wire  signed [8:0] tmp_16_i_i_i2_cast_fu_687_p1;
wire  signed [8:0] sh_assign_3_fu_691_p3;
wire  signed [31:0] sh_assign_3_cast_fu_699_p1;
wire  signed [24:0] sh_assign_3_cast_cas_fu_703_p1;
wire   [78:0] tmp_15_i_i_i2_cast8_fu_665_p1;
wire   [78:0] tmp_17_i_i_i2_fu_707_p1;
wire   [24:0] tmp_18_i_i_i2_fu_711_p2;
wire   [0:0] tmp_32_fu_723_p3;
wire   [78:0] tmp_19_i_i_i2_fu_717_p2;
wire   [31:0] tmp_18_fu_731_p1;
wire   [31:0] tmp_19_fu_735_p4;
wire   [22:0] loc_V_1_fu_753_p1;
wire   [24:0] tmp_15_i_i_i_fu_756_p4;
wire   [8:0] tmp_i_i_i_i_cast9_fu_770_p1;
wire   [8:0] sh_assign_fu_774_p2;
wire   [0:0] isNeg_fu_780_p3;
wire  signed [8:0] tmp_16_i_i_i_cast_fu_788_p1;
wire  signed [8:0] sh_assign_1_fu_792_p3;
wire  signed [31:0] sh_assign_1_cast_fu_800_p1;
wire  signed [24:0] sh_assign_1_cast_cas_fu_804_p1;
wire   [78:0] tmp_15_i_i_i_cast1_fu_766_p1;
wire   [78:0] tmp_17_i_i_i_fu_808_p1;
wire   [24:0] tmp_18_i_i_i_fu_812_p2;
wire   [0:0] tmp_28_fu_824_p3;
wire   [78:0] tmp_19_i_i_i_fu_818_p2;
wire   [31:0] tmp_14_fu_832_p1;
wire   [31:0] tmp_15_fu_836_p4;
wire   [31:0] p_Val2_6_i_i_i4_fu_858_p2;
wire   [31:0] p_Val2_6_i_i_i3_fu_869_p2;
wire   [24:0] grp_fu_886_p0;
wire    ap_CS_fsm_state42;
wire   [31:0] p_Val2_6_i_i_i2_fu_893_p2;
wire   [31:0] p_Val2_6_i_i_i_fu_904_p2;
wire   [24:0] grp_fu_921_p0;
wire    ap_CS_fsm_state72;
reg    grp_fu_403_ap_start;
wire    grp_fu_403_ap_done;
reg    grp_fu_886_ap_start;
wire    grp_fu_886_ap_done;
reg    grp_fu_921_ap_start;
wire    grp_fu_921_ap_done;
reg   [99:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 100'd1;
#0 enable_preg = 1'b0;
#0 back_preg = 1'b0;
#0 forward_preg = 1'b0;
#0 freq_preg = 32'd0;
end

manage_man_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_MAN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_MAN_DATA_WIDTH ))
manage_man_s_axi_U(
    .AWVALID(s_axi_man_AWVALID),
    .AWREADY(s_axi_man_AWREADY),
    .AWADDR(s_axi_man_AWADDR),
    .WVALID(s_axi_man_WVALID),
    .WREADY(s_axi_man_WREADY),
    .WDATA(s_axi_man_WDATA),
    .WSTRB(s_axi_man_WSTRB),
    .ARVALID(s_axi_man_ARVALID),
    .ARREADY(s_axi_man_ARREADY),
    .ARADDR(s_axi_man_ARADDR),
    .RVALID(s_axi_man_RVALID),
    .RREADY(s_axi_man_RREADY),
    .RDATA(s_axi_man_RDATA),
    .RRESP(s_axi_man_RRESP),
    .BVALID(s_axi_man_BVALID),
    .BREADY(s_axi_man_BREADY),
    .BRESP(s_axi_man_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .homing(homing),
    .f(x_assign_reg_958),
    .f_ap_vld(f_ap_vld),
    .k(k),
    .monitor(monitor)
);

manage_sitofp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
manage_sitofp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_949),
    .ce(1'b1),
    .dout(grp_fu_213_p1)
);

manage_sdiv_25ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
manage_sdiv_25ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_403_ap_start),
    .done(grp_fu_403_ap_done),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

manage_sdiv_25ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
manage_sdiv_25ns_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_886_ap_start),
    .done(grp_fu_886_ap_done),
    .din0(grp_fu_886_p0),
    .din1(tmp_18_pn_reg_193),
    .ce(1'b1),
    .dout(grp_fu_886_p2)
);

manage_sdiv_25ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
manage_sdiv_25ns_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_921_ap_start),
    .done(grp_fu_921_ap_done),
    .din0(grp_fu_921_p0),
    .din1(tmp_13_pn_reg_203),
    .ce(1'b1),
    .dout(grp_fu_921_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        back_preg <= 1'b0;
    end else begin
        if ((((tmp_3_reg_1023 == 1'd0) & (1'b1 == ap_CS_fsm_state41)) | ((tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1)))) begin
            back_preg <= 1'd0;
        end else if (((1'b1 == ap_CS_fsm_state38) | ((tmp_7_reg_1052 == 1'd0) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_8_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0)))) begin
            back_preg <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enable_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            enable_preg <= 1'd1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            enable_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        forward_preg <= 1'b0;
    end else begin
        if ((((tmp_3_reg_1023 == 1'd0) & (1'b1 == ap_CS_fsm_state41)) | ((tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1)))) begin
            forward_preg <= 1'd1;
        end else if (((1'b1 == ap_CS_fsm_state38) | ((tmp_7_reg_1052 == 1'd0) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_8_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0)))) begin
            forward_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        freq_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state100)) begin
            freq_preg <= grp_fu_921_p2;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            freq_preg <= grp_fu_886_p2;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            freq_preg <= tmp_s_reg_1015;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        h_count_1_reg_183 <= h_count_1_be_reg_1103;
    end else if (((1'b1 == ap_CS_fsm_state9) & (sensor_read_read_fu_126_p2 == 1'd1) & (monitor_read_reg_936 == 1'd1))) begin
        h_count_1_reg_183 <= h_count_fu_98;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        h_count_4_reg_173 <= h_count_3_reg_1088;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0) & (monitor_read_reg_936 == 1'd1))) begin
        h_count_4_reg_173 <= h_count_fu_98;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_640_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1))) begin
                h_count_fu_98[30 : 0] <= h_count_2_cast_reg_1000[30 : 0];
    end else if (((tmp_8_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0))) begin
                h_count_fu_98[30 : 0] <= smax_cast_reg_995[30 : 0];
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                h_count_fu_98[0] <= 1'b0;
        h_count_fu_98[1] <= 1'b0;
        h_count_fu_98[2] <= 1'b0;
        h_count_fu_98[3] <= 1'b0;
        h_count_fu_98[4] <= 1'b0;
        h_count_fu_98[5] <= 1'b0;
        h_count_fu_98[6] <= 1'b0;
        h_count_fu_98[7] <= 1'b0;
        h_count_fu_98[8] <= 1'b0;
        h_count_fu_98[9] <= 1'b0;
        h_count_fu_98[10] <= 1'b0;
        h_count_fu_98[11] <= 1'b0;
        h_count_fu_98[12] <= 1'b0;
        h_count_fu_98[13] <= 1'b0;
        h_count_fu_98[14] <= 1'b0;
        h_count_fu_98[15] <= 1'b0;
        h_count_fu_98[16] <= 1'b0;
        h_count_fu_98[17] <= 1'b0;
        h_count_fu_98[18] <= 1'b0;
        h_count_fu_98[19] <= 1'b0;
        h_count_fu_98[20] <= 1'b0;
        h_count_fu_98[21] <= 1'b0;
        h_count_fu_98[22] <= 1'b0;
        h_count_fu_98[23] <= 1'b0;
        h_count_fu_98[24] <= 1'b0;
        h_count_fu_98[25] <= 1'b0;
        h_count_fu_98[26] <= 1'b0;
        h_count_fu_98[27] <= 1'b0;
        h_count_fu_98[28] <= 1'b0;
        h_count_fu_98[29] <= 1'b0;
        h_count_fu_98[30] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        if ((tmp_7_reg_1052 == 1'd1)) begin
            tmp_13_pn_reg_203 <= p_Val2_4_fu_909_p3;
        end else if ((tmp_7_reg_1052 == 1'd0)) begin
            tmp_13_pn_reg_203 <= p_Val2_8_fu_898_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        if ((tmp_3_reg_1023 == 1'd1)) begin
            tmp_18_pn_reg_193 <= p_Val2_14_fu_874_p3;
        end else if ((tmp_3_reg_1023 == 1'd0)) begin
            tmp_18_pn_reg_193 <= p_Val2_18_fu_863_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        h_count_1_be_reg_1103 <= h_count_1_be_fu_915_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (sensor_read_read_fu_126_p2 == 1'd1) & (monitor_read_reg_936 == 1'd1))) begin
        h_count_2_cast_reg_1000[30 : 0] <= h_count_2_cast_fu_331_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        h_count_3_reg_1088 <= h_count_3_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_4_reg_963 == 1'd0) & (sensor_read_read_fu_126_p2 == 1'd0) & (tmp_5_reg_945 == 1'd1) & (monitor_read_reg_936 == 1'd1))) begin
        isNeg_2_reg_984 <= sh_assign_4_fu_277_p2[32'd8];
        sh_assign_5_reg_989 <= sh_assign_5_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_read_reg_940 <= k;
        monitor_read_reg_936 <= monitor;
        tmp_5_reg_945 <= tmp_5_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_646_p2 == 1'd0) & (tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1))) begin
        p_Result_1_reg_1056 <= p_Val2_s_reg_967[32'd31];
        p_Val2_6_reg_1061 <= p_Val2_6_fu_745_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_422_p2 == 1'd1) & (tmp_3_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0))) begin
        p_Result_2_reg_1038 <= p_Val2_s_reg_967[32'd31];
        p_Val2_12_reg_1043 <= p_Val2_12_fu_628_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_428_p2 == 1'd0) & (tmp_8_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0))) begin
        p_Result_3_reg_1027 <= p_Val2_s_reg_967[32'd31];
        p_Val2_16_reg_1032 <= p_Val2_16_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Result_4_reg_1005 <= p_Val2_s_reg_967[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_640_p2 == 1'd1) & (tmp_7_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1))) begin
        p_Result_s_reg_1067 <= p_Val2_s_reg_967[32'd31];
        p_Val2_2_reg_1072 <= p_Val2_2_fu_846_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_s_reg_967 <= p_Val2_s_fu_265_p1;
        tmp_4_reg_963 <= tmp_4_fu_259_p2;
        x_assign_reg_958 <= grp_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0) & (monitor_read_reg_936 == 1'd1))) begin
        smax_cast_reg_995[30 : 0] <= smax_cast_fu_315_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_2_reg_949[31 : 2] <= tmp_2_fu_254_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0))) begin
        tmp_3_reg_1023 <= tmp_3_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1))) begin
        tmp_7_reg_1052 <= tmp_7_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_s_reg_1015 <= tmp_s_fu_415_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (monitor_read_reg_936 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (monitor_read_reg_936 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_1023 == 1'd0) & (1'b1 == ap_CS_fsm_state41)) | ((tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1)))) begin
        back = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state38) | ((tmp_7_reg_1052 == 1'd0) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_8_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0)))) begin
        back = 1'd1;
    end else begin
        back = back_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((1'b1 == ap_CS_fsm_state9) & (sensor_read_read_fu_126_p2 == 1'd1) & (monitor_read_reg_936 == 1'd1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0) & (monitor_read_reg_936 == 1'd1)))) begin
        enable = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        enable = 1'd0;
    end else begin
        enable = enable_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((tmp_7_reg_1052 == 1'd1) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_7_reg_1052 == 1'd0) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_3_reg_1023 == 1'd1) & (1'b1 == ap_CS_fsm_state41)) | ((tmp_3_reg_1023 == 1'd0) & (1'b1 == ap_CS_fsm_state41)))) begin
        f_ap_vld = 1'b1;
    end else begin
        f_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_3_reg_1023 == 1'd0) & (1'b1 == ap_CS_fsm_state41)) | ((tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1)))) begin
        forward = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state38) | ((tmp_7_reg_1052 == 1'd0) & (1'b1 == ap_CS_fsm_state71)) | ((tmp_8_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0)))) begin
        forward = 1'd0;
    end else begin
        forward = forward_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        freq = grp_fu_921_p2;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        freq = grp_fu_886_p2;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        freq = tmp_s_reg_1015;
    end else begin
        freq = freq_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_403_ap_start = 1'b1;
    end else begin
        grp_fu_403_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_886_ap_start = 1'b1;
    end else begin
        grp_fu_886_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_921_ap_start = 1'b1;
    end else begin
        grp_fu_921_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (monitor_read_reg_936 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state9) & (((tmp_5_reg_945 == 1'd0) & (monitor_read_reg_936 == 1'd1)) | ((sensor_read_read_fu_126_p2 == 1'd1) & (monitor_read_reg_936 == 1'd1)) | ((tmp_4_reg_963 == 1'd1) & (monitor_read_reg_936 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (((tmp_6_fu_640_p2 == 1'd0) & (sensor_read_read_fu_126_p2 == 1'd1)) | ((tmp_8_fu_422_p2 == 1'd0) & (tmp_4_reg_963 == 1'd1) & (sensor_read_read_fu_126_p2 == 1'd0)) | ((tmp_4_reg_963 == 1'd0) & (sensor_read_read_fu_126_p2 == 1'd0) & (tmp_5_reg_945 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((tmp_6_fu_640_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (sensor_read_read_fu_126_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_216_p4 = {{p_Val2_s_reg_967[30:23]}};

assign grp_fu_225_p2 = (8'd127 - grp_fu_216_p4);

assign grp_fu_231_p2 = ((h_count_fu_98 > 32'd861) ? 1'b1 : 1'b0);

assign grp_fu_403_p0 = 32'd6250000;

assign grp_fu_403_p1 = ((isNeg_2_reg_984[0:0] === 1'b1) ? tmp_10_fu_382_p1 : tmp_11_fu_386_p4);

assign grp_fu_886_p0 = 32'd6250000;

assign grp_fu_921_p0 = 32'd6250000;

assign h_count_1_be_fu_915_p2 = (h_count_1_reg_183 + 32'd1);

assign h_count_2_cast_fu_331_p1 = h_count_2_fu_323_p3;

assign h_count_2_fu_323_p3 = ((grp_fu_231_p2[0:0] === 1'b1) ? tmp_9_fu_319_p1 : 31'd861);

assign h_count_3_fu_880_p2 = (h_count_4_reg_173 + 32'd1);

assign isNeg_1_fu_679_p3 = sh_assign_2_fu_673_p2[32'd8];

assign isNeg_2_fu_283_p3 = sh_assign_4_fu_277_p2[32'd8];

assign isNeg_3_fu_562_p3 = sh_assign_6_fu_556_p2[32'd8];

assign isNeg_4_fu_461_p3 = sh_assign_8_fu_455_p2[32'd8];

assign isNeg_fu_780_p3 = sh_assign_fu_774_p2[32'd8];

assign loc_V_1_fu_753_p1 = p_Val2_s_reg_967[22:0];

assign loc_V_3_fu_652_p1 = p_Val2_s_reg_967[22:0];

assign loc_V_5_fu_535_p1 = p_Val2_s_reg_967[22:0];

assign loc_V_7_fu_434_p1 = p_Val2_s_reg_967[22:0];

assign loc_V_9_fu_335_p1 = p_Val2_s_reg_967[22:0];

assign p_Val2_12_fu_628_p3 = ((isNeg_3_fu_562_p3[0:0] === 1'b1) ? tmp_21_fu_614_p1 : tmp_22_fu_618_p4);

assign p_Val2_14_fu_874_p3 = ((p_Result_2_reg_1038[0:0] === 1'b1) ? p_Val2_6_i_i_i3_fu_869_p2 : p_Val2_12_reg_1043);

assign p_Val2_16_fu_527_p3 = ((isNeg_4_fu_461_p3[0:0] === 1'b1) ? tmp_23_fu_513_p1 : tmp_24_fu_517_p4);

assign p_Val2_18_fu_863_p3 = ((p_Result_3_reg_1027[0:0] === 1'b1) ? p_Val2_6_i_i_i4_fu_858_p2 : p_Val2_16_reg_1032);

assign p_Val2_2_fu_846_p3 = ((isNeg_fu_780_p3[0:0] === 1'b1) ? tmp_14_fu_832_p1 : tmp_15_fu_836_p4);

assign p_Val2_4_fu_909_p3 = ((p_Result_s_reg_1067[0:0] === 1'b1) ? p_Val2_6_i_i_i_fu_904_p2 : p_Val2_2_reg_1072);

assign p_Val2_6_fu_745_p3 = ((isNeg_1_fu_679_p3[0:0] === 1'b1) ? tmp_18_fu_731_p1 : tmp_19_fu_735_p4);

assign p_Val2_6_i_i_i2_fu_893_p2 = (32'd0 - p_Val2_6_reg_1061);

assign p_Val2_6_i_i_i3_fu_869_p2 = (32'd0 - p_Val2_12_reg_1043);

assign p_Val2_6_i_i_i4_fu_858_p2 = (32'd0 - p_Val2_16_reg_1032);

assign p_Val2_6_i_i_i_fu_904_p2 = (32'd0 - p_Val2_2_reg_1072);

assign p_Val2_8_fu_898_p3 = ((p_Result_1_reg_1056[0:0] === 1'b1) ? p_Val2_6_i_i_i2_fu_893_p2 : p_Val2_6_reg_1061);

assign p_Val2_s_fu_265_p1 = grp_fu_213_p1;

assign p_neg_fu_409_p2 = (32'd0 - grp_fu_403_p2);

assign sensor_read_read_fu_126_p2 = sensor;

assign sh_assign_1_cast_cas_fu_804_p1 = sh_assign_1_fu_792_p3;

assign sh_assign_1_cast_fu_800_p1 = sh_assign_1_fu_792_p3;

assign sh_assign_1_fu_792_p3 = ((isNeg_fu_780_p3[0:0] === 1'b1) ? tmp_16_i_i_i_cast_fu_788_p1 : sh_assign_fu_774_p2);

assign sh_assign_2_fu_673_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i2_cast7_fu_669_p1));

assign sh_assign_3_cast_cas_fu_703_p1 = sh_assign_3_fu_691_p3;

assign sh_assign_3_cast_fu_699_p1 = sh_assign_3_fu_691_p3;

assign sh_assign_3_fu_691_p3 = ((isNeg_1_fu_679_p3[0:0] === 1'b1) ? tmp_16_i_i_i2_cast_fu_687_p1 : sh_assign_2_fu_673_p2);

assign sh_assign_4_fu_277_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i1_cast1_fu_273_p1));

assign sh_assign_5_cast_cas_fu_355_p1 = sh_assign_5_reg_989;

assign sh_assign_5_cast_fu_352_p1 = sh_assign_5_reg_989;

assign sh_assign_5_fu_295_p3 = ((isNeg_2_fu_283_p3[0:0] === 1'b1) ? tmp_16_i_i_i1_cast_fu_291_p1 : sh_assign_4_fu_277_p2);

assign sh_assign_6_fu_556_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i3_cast5_fu_552_p1));

assign sh_assign_7_cast_cas_fu_586_p1 = sh_assign_7_fu_574_p3;

assign sh_assign_7_cast_fu_582_p1 = sh_assign_7_fu_574_p3;

assign sh_assign_7_fu_574_p3 = ((isNeg_3_fu_562_p3[0:0] === 1'b1) ? tmp_16_i_i_i3_cast_fu_570_p1 : sh_assign_6_fu_556_p2);

assign sh_assign_8_fu_455_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i4_cast3_fu_451_p1));

assign sh_assign_9_cast_cas_fu_485_p1 = sh_assign_9_fu_473_p3;

assign sh_assign_9_cast_fu_481_p1 = sh_assign_9_fu_473_p3;

assign sh_assign_9_fu_473_p3 = ((isNeg_4_fu_461_p3[0:0] === 1'b1) ? tmp_16_i_i_i4_cast_fu_469_p1 : sh_assign_8_fu_455_p2);

assign sh_assign_fu_774_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast9_fu_770_p1));

assign smax_cast_fu_315_p1 = smax_fu_307_p3;

assign smax_fu_307_p3 = ((grp_fu_231_p2[0:0] === 1'b1) ? tmp_12_fu_303_p1 : 31'd861);

assign tmp_10_fu_382_p1 = tmp_20_fu_374_p3;

assign tmp_11_fu_386_p4 = {{tmp_19_i_i_i1_fu_368_p2[55:24]}};

assign tmp_12_fu_303_p1 = h_count_fu_98[30:0];

assign tmp_14_fu_832_p1 = tmp_28_fu_824_p3;

assign tmp_15_fu_836_p4 = {{tmp_19_i_i_i_fu_818_p2[55:24]}};

assign tmp_15_i_i_i1_cast2_fu_348_p1 = tmp_15_i_i_i1_fu_338_p4;

assign tmp_15_i_i_i1_fu_338_p4 = {{{{1'd1}, {loc_V_9_fu_335_p1}}}, {1'd0}};

assign tmp_15_i_i_i2_cast8_fu_665_p1 = tmp_15_i_i_i2_fu_655_p4;

assign tmp_15_i_i_i2_fu_655_p4 = {{{{1'd1}, {loc_V_3_fu_652_p1}}}, {1'd0}};

assign tmp_15_i_i_i3_cast6_fu_548_p1 = tmp_15_i_i_i3_fu_538_p4;

assign tmp_15_i_i_i3_fu_538_p4 = {{{{1'd1}, {loc_V_5_fu_535_p1}}}, {1'd0}};

assign tmp_15_i_i_i4_cast4_fu_447_p1 = tmp_15_i_i_i4_fu_437_p4;

assign tmp_15_i_i_i4_fu_437_p4 = {{{{1'd1}, {loc_V_7_fu_434_p1}}}, {1'd0}};

assign tmp_15_i_i_i_cast1_fu_766_p1 = tmp_15_i_i_i_fu_756_p4;

assign tmp_15_i_i_i_fu_756_p4 = {{{{1'd1}, {loc_V_1_fu_753_p1}}}, {1'd0}};

assign tmp_16_i_i_i1_cast_fu_291_p1 = $signed(grp_fu_225_p2);

assign tmp_16_i_i_i2_cast_fu_687_p1 = $signed(grp_fu_225_p2);

assign tmp_16_i_i_i3_cast_fu_570_p1 = $signed(grp_fu_225_p2);

assign tmp_16_i_i_i4_cast_fu_469_p1 = $signed(grp_fu_225_p2);

assign tmp_16_i_i_i_cast_fu_788_p1 = $signed(grp_fu_225_p2);

assign tmp_17_i_i_i1_fu_358_p1 = $unsigned(sh_assign_5_cast_fu_352_p1);

assign tmp_17_i_i_i2_fu_707_p1 = $unsigned(sh_assign_3_cast_fu_699_p1);

assign tmp_17_i_i_i3_fu_590_p1 = $unsigned(sh_assign_7_cast_fu_582_p1);

assign tmp_17_i_i_i4_fu_489_p1 = $unsigned(sh_assign_9_cast_fu_481_p1);

assign tmp_17_i_i_i_fu_808_p1 = $unsigned(sh_assign_1_cast_fu_800_p1);

assign tmp_18_fu_731_p1 = tmp_32_fu_723_p3;

assign tmp_18_i_i_i1_fu_362_p2 = tmp_15_i_i_i1_fu_338_p4 >> sh_assign_5_cast_cas_fu_355_p1;

assign tmp_18_i_i_i2_fu_711_p2 = tmp_15_i_i_i2_fu_655_p4 >> sh_assign_3_cast_cas_fu_703_p1;

assign tmp_18_i_i_i3_fu_594_p2 = tmp_15_i_i_i3_fu_538_p4 >> sh_assign_7_cast_cas_fu_586_p1;

assign tmp_18_i_i_i4_fu_493_p2 = tmp_15_i_i_i4_fu_437_p4 >> sh_assign_9_cast_cas_fu_485_p1;

assign tmp_18_i_i_i_fu_812_p2 = tmp_15_i_i_i_fu_756_p4 >> sh_assign_1_cast_cas_fu_804_p1;

assign tmp_19_fu_735_p4 = {{tmp_19_i_i_i2_fu_717_p2[55:24]}};

assign tmp_19_i_i_i1_fu_368_p2 = tmp_15_i_i_i1_cast2_fu_348_p1 << tmp_17_i_i_i1_fu_358_p1;

assign tmp_19_i_i_i2_fu_717_p2 = tmp_15_i_i_i2_cast8_fu_665_p1 << tmp_17_i_i_i2_fu_707_p1;

assign tmp_19_i_i_i3_fu_600_p2 = tmp_15_i_i_i3_cast6_fu_548_p1 << tmp_17_i_i_i3_fu_590_p1;

assign tmp_19_i_i_i4_fu_499_p2 = tmp_15_i_i_i4_cast4_fu_447_p1 << tmp_17_i_i_i4_fu_489_p1;

assign tmp_19_i_i_i_fu_818_p2 = tmp_15_i_i_i_cast1_fu_766_p1 << tmp_17_i_i_i_fu_808_p1;

assign tmp_20_fu_374_p3 = tmp_18_i_i_i1_fu_362_p2[32'd24];

assign tmp_21_fu_614_p1 = tmp_36_fu_606_p3;

assign tmp_22_fu_618_p4 = {{tmp_19_i_i_i3_fu_600_p2[55:24]}};

assign tmp_23_fu_513_p1 = tmp_40_fu_505_p3;

assign tmp_24_fu_517_p4 = {{tmp_19_i_i_i4_fu_499_p2[55:24]}};

assign tmp_28_fu_824_p3 = tmp_18_i_i_i_fu_812_p2[32'd24];

assign tmp_2_fu_254_p2 = ($signed(k_read_reg_940) * $signed('h64));

assign tmp_32_fu_723_p3 = tmp_18_i_i_i2_fu_711_p2[32'd24];

assign tmp_36_fu_606_p3 = tmp_18_i_i_i3_fu_594_p2[32'd24];

assign tmp_3_fu_428_p2 = (($signed(h_count_4_reg_173) < $signed(32'd571)) ? 1'b1 : 1'b0);

assign tmp_40_fu_505_p3 = tmp_18_i_i_i4_fu_493_p2[32'd24];

assign tmp_4_fu_259_p2 = ((current_count == 32'd4046) ? 1'b1 : 1'b0);

assign tmp_5_fu_243_p2 = ((homing == 32'd1) ? 1'b1 : 1'b0);

assign tmp_6_fu_640_p2 = (($signed(h_count_1_reg_183) < $signed(32'd861)) ? 1'b1 : 1'b0);

assign tmp_7_fu_646_p2 = (($signed(h_count_1_reg_183) < $signed(32'd571)) ? 1'b1 : 1'b0);

assign tmp_8_fu_422_p2 = (($signed(h_count_4_reg_173) < $signed(32'd861)) ? 1'b1 : 1'b0);

assign tmp_9_fu_319_p1 = h_count_fu_98[30:0];

assign tmp_i_i_i_i1_cast1_fu_273_p1 = grp_fu_216_p4;

assign tmp_i_i_i_i2_cast7_fu_669_p1 = grp_fu_216_p4;

assign tmp_i_i_i_i3_cast5_fu_552_p1 = grp_fu_216_p4;

assign tmp_i_i_i_i4_cast3_fu_451_p1 = grp_fu_216_p4;

assign tmp_i_i_i_i_cast9_fu_770_p1 = grp_fu_216_p4;

assign tmp_s_fu_415_p3 = ((p_Result_4_reg_1005[0:0] === 1'b1) ? p_neg_fu_409_p2 : grp_fu_403_p2);

always @ (posedge ap_clk) begin
    tmp_2_reg_949[1:0] <= 2'b00;
    smax_cast_reg_995[31] <= 1'b0;
    h_count_2_cast_reg_1000[31] <= 1'b0;
    h_count_fu_98[31] <= 1'b0;
end

endmodule //manage
